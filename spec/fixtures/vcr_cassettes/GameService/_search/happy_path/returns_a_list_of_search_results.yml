---
http_interactions:
- request:
    method: get
    uri: https://api.boardgameatlas.com/api/search?client_id=<client_id>&name=catan
    body:
      encoding: US-ASCII
      string: ''
    headers:
      User-Agent:
      - Faraday v2.7.4
      Accept-Encoding:
      - gzip;q=1.0,deflate;q=0.6,identity;q=0.3
      Accept:
      - "*/*"
  response:
    status:
      code: 200
      message: OK
    headers:
      Server:
      - Cowboy
      Connection:
      - keep-alive
      X-Powered-By:
      - Express
      Content-Security-Policy:
      - 'default-src ''self'' https://* s3.us-west-1.amazonaws.com www.google-analytics.com
        stats.g.doubleclick.net www.youtube.com anchor.fm www.googletagmanager.com;script-src
        * ''unsafe-inline'' ''unsafe-eval'';img-src * data:;frame-ancestors ''self''
        https://*.mybigcommerce.com;upgrade-insecure-requests;base-uri ''self'';block-all-mixed-content;font-src
        ''self'' https: data:;object-src ''none'';script-src-attr ''none'';style-src
        ''self'' https: ''unsafe-inline'''
      X-Ratelimit-Limit:
      - '420'
      X-Ratelimit-Remaining:
      - '419'
      Date:
      - Tue, 07 Feb 2023 14:25:19 GMT
      X-Ratelimit-Reset:
      - '1675779947'
      Access-Control-Allow-Origin:
      - "*"
      Access-Control-Allow-Headers:
      - Origin, X-Requested-With, Content-Type, Accept
      Content-Type:
      - application/json; charset=utf-8
      Etag:
      - W/"4c1af-PXrdSgGga6wv5gcN46G1Aiks7dA"
      Vary:
      - Accept-Encoding
      Transfer-Encoding:
      - chunked
      Via:
      - 1.1 vegur
    body:
      encoding: ASCII-8BIT
      string: !binary |-
        {
  "games": [
    {
      "id": "OIXt3DmJU0",
      "handle": "catan",
      "url": "https://www.boardgameatlas.com/game/OIXt3DmJU0/catan",
      "bga_edit_url": "https://www.boardgameatlas.com/game/OIXt3DmJU0/edit",
      "template_url": "/products/listing?objectId=OIXt3DmJU0&product_line=Board Games&type=product",
      "name": "Catan",
      "price": "41.99",
      "price_ca": "53.27",
      "price_uk": "35.78",
      "price_au": "49.95",
      "msrp": 55,
      "msrps": [
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.24",
      "year_published": 1995,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 45,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>The women and men of your expedition build the first two settlements. Fortunately, the land is rich in natural resources. You build roads and new settlements that eventually become cities. Will you succeed in gaining supremacy on Catan? Barter trade dominates the scene. Some resources you have in abundance, other resources are scarce. Ore for wool, brick for lumber - you trade according to what is needed for your current building projects. Proceed strategically! If you found your settlements in the right places and skillfully trade your resources, then the odds will be in your favor. But your opponents are smart too.</p>\r\n<p>To begin the game, we build the game board using hexagonal terrain tiles. Catan is born - a beautiful island with mountains, pastures, hills, fields, and forests, surrounded by the sea.</p>\r\n<p>Each of us places two small houses on spaces where three terrain hexes meet. They are our starting settlements.</p>\r\n<p>And so it begins. I roll two dice. An “11”! Each terrain hex is marked with a die roll number. Each player who owns a settlement adjacent to a terrain hex marked with the number rolled receives a resource produced by this hex. Hills produce brick, forests produce lumber, mountains produce ore, fields produce grain, and pastures produce wool.</p>\r\n<p>We use these resources to expand across Catan: we build roads and new settlements, or we upgrade our existing settlements to cities. For example, a road costs 1 brick and 1 lumber. If we do not have the necessary resources, we can acquire them by trading with our opponents.</p>\r\n<p>Each settlement is worth 1 victory point and each city is worth 2 victory points. If you expand cleverly, you may be the first player to reach 10 victory points and thus win the game!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324722072.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324722072.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [
        {
          "id": "mavSOM8vjH",
          "url": "https://www.boardgameatlas.com/category/mavSOM8vjH/undefined"
        },
        {
          "id": "N0TkEGfEsF",
          "url": "https://www.boardgameatlas.com/category/N0TkEGfEsF/undefined"
        },
        {
          "id": "7rV11PKqME",
          "url": "https://www.boardgameatlas.com/category/7rV11PKqME/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        }
      ],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "yLh8H5FK65",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/yLh8H5FK65/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "0bvxqCgoSm",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/0bvxqCgoSm/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "FG63HUGsWf",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/FG63HUGsWf/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "rK95BcOECc",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/rK95BcOECc/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "beoSVYQtGP",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/beoSVYQtGP/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "m26fBgcJwz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m26fBgcJwz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "HAkNG813TS",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/HAkNG813TS/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "hRyavENXm0",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/hRyavENXm0/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "ja1W0hp62r",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ja1W0hp62r/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9XxoqlxAVw",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9XxoqlxAVw/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "P9ZfBj0BBq",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/P9ZfBj0BBq/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "sOdfXQmRBg",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/sOdfXQmRBg/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "QZq0yTzciC",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/QZq0yTzciC/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LhiwjGd2o7",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LhiwjGd2o7/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "EqSluthV2x",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/EqSluthV2x/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "My6tXSDwGi",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/My6tXSDwGi/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UMssR9EGlp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/UMssR9EGlp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LeyRDCEgWD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LeyRDCEgWD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9DlitZqr9J",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9DlitZqr9J/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "J8pMyONAQy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/J8pMyONAQy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "8NZhpDk9gP",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/8NZhpDk9gP/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "w9rkA29mT0",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/w9rkA29mT0/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "32liHCLQDl",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/32liHCLQDl/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "DGzIGrGHoR",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/DGzIGrGHoR/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "eQb3IOfYYF",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eQb3IOfYYF/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "69FdScTBpp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/69FdScTBpp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "F8XIZ06AV1",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/F8XIZ06AV1/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "RlZVJC3kRi",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RlZVJC3kRi/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Pete Fenlon",
        "Jason Hawkins",
        "Michaela Kienle",
        "Harald Lieske",
        "Michael Menzel",
        "Marion Pott",
        "Matt Schwabel",
        "Franz Vohwinkel",
        "Stephen Graham Walsh"
      ],
      "names": [],
      "rules_url": "https://www.catan.com/understand-catan/game-rules",
      "amazon_rank": 133,
      "official_url": "https://www.catan.com/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 906,
      "average_user_rating": 3.246977605609172,
      "size_height": 11.6,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-21T16:44:32.553Z",
          "price": 52.01,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-25T14:03:51.126Z",
          "price": 36.97,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-02-26T18:20:55.616Z",
          "price": 35.78,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-02-06T09:10:03.885Z",
          "price": 41.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 11,
      "average_learning_complexity": 2.090909090909091,
      "average_strategy_complexity": 2.5454545454545454,
      "visits": 9436,
      "lists": 1789,
      "mentions": 126,
      "links": 24,
      "plays": 5979,
      "rank": 22,
      "type": "game",
      "sku": "CNS3071",
      "upc": "029877030712",
      "isbn": "",
      "video_links": [],
      "availability_status": "Available",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3071",
        "2149146897",
        "2149270668",
        "2149187433",
        "2148942466",
        "CSICN3071",
        "029877030712",
        "C15A-A60",
        "MFG3071",
        "8435407619432",
        "002987703071204900",
        "81864",
        "Ballarat|02dcd191-ae0b-11e8-ed44-62a025013f69",
        "23409",
        "catan-5th-core",
        "CSICN3071-DING",
        "2148679636",
        "2148901500",
        "2149210632",
        "2149274809",
        "29877030712",
        "33238 #0484",
        "39946:150485",
        "BG-000082-001",
        "CSG1001",
        "MDGCA00174",
        "200121228",
        "2148888136",
        "KOS-FICAT01",
        "B-BG-MFG3071",
        "MFG3061",
        "2149071503",
        "2149018514",
        "2148819029"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3071"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149146897"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149270668"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149187433"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148942466"
        },
        {
          "name": "Card Haus",
          "sku": "CSICN3071"
        },
        {
          "name": "401 Games",
          "sku": "029877030712"
        },
        {
          "name": "More Than Meeples",
          "sku": "C15A-A60"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "MFG3071"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "8435407619432"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "002987703071204900"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81864"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae0b-11e8-ed44-62a025013f69"
        },
        {
          "name": "Hanabee",
          "sku": "23409"
        },
        {
          "name": "Rollers",
          "sku": "catan-5th-core"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3071-DING"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148679636"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148901500"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149210632"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149274809"
        },
        {
          "name": "Board Game Supply",
          "sku": "29877030712"
        },
        {
          "name": "Funagain Games",
          "sku": "33238 #0484"
        },
        {
          "name": "BoardGameCo",
          "sku": "39946:150485"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000082-001"
        },
        {
          "name": "Board's Edge Games",
          "sku": "CSG1001"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA00174"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "200121228"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148888136"
        },
        {
          "name": "Philibert",
          "sku": "KOS-FICAT01"
        },
        {
          "name": "Magic Madhouse",
          "sku": "B-BG-MFG3071"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "MFG3061"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149071503"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149018514"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148819029"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=OIXt3DmJU0&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "45-90",
      "msrp_text": "$55.00",
      "price_text": "$41.99",
      "tags": [
        "Die Siedler von Catan ",
        "Les Colons de Catane",
        "Catan (Колонизаторы)",
        "Catan: Das Spiel",
        "Catan: Die Bordspel",
        "Catan: El Juego",
        "Catan: Gra planszowa",
        "Catan: Il Gioco",
        "Catan: Landnemarnir",
        "Catan: O Jogo",
        "Catan: Osnovna igra",
        "Catan: Telepesei",
        "Catane",
        "Catanin Uudisasukkaat",
        "I Coloni di Catan",
        "I Coloni di Katan",
        "Coloniștii din Catan",
        "Colonizadores de Catan",
        "Los Colonos de Catán",
        "Les Colons de Katane",
        "Os Descobridores de Catan",
        "Los Descubridores de Catán",
        "Els Colons de Catan",
        "Katan",
        "Katan no Kaitakusya",
        "Katanas ieceïotâji",
        "Katanas Ieceļotāji",
        "Katani Asustajad",
        "Katano salos naujakuriai",
        "Katano Salos Naujakuriai",
        "De Kolonisten van Catan",
        "Naseljenci otoka Catan",
        "Naseljenici ostrva Katan",
        "Naseljenici ostrva Katan / Насељеници острва Катан",
        "Die Ontdekkers van Catan",
        "Osadníci z Katanu",
        "Osadnicy z Catanu",
        "Settlers fra Catan",
        "The Settlers fra Catan",
        "Settlers från Catan",
        "The Settlers från Catan",
        "The Settlers of Catan",
        "Οι Άποικοι του Κατάν",
        "Заселниците на Катан",
        "Колонизаторы",
        "המתיישבים של קטאן",
        "นักบุกเบิกแห่ง Catan",
        "カタンの開拓者",
        "カタンの開拓者たち",
        "カタンの開拓者たち スタンダード版",
        "卡坦岛",
        "카탄",
        "카탄의 개척자",
        "Catan",
        "Catan 2015 Refresh Base Game",
        "Catan 2015 Refresh",
        "Settlers of Catan The Revised Edition",
        "Settlers of Catan The Printing",
        "Settlers of Catan Collection 2 Base Game 2 Expansions and 3 Extensions",
        "Catan Base Game",
        "CATAN Base Game",
        "Catan 5th Edition 2015",
        "Settlers of Catan The 2nd Printing",
        "Siedler Von Catan Die",
        "Settlers of Catan Collection 4 Base Game 2 Expansions",
        "Settlers of Catan Collection 4 Base Game 3 Expansions",
        "Catan Formerly known as Settlers of Catan",
        "Catan 5th Edition",
        "Catan Settlers of Catan",
        "Settlers of Catan 5th Edition",
        "Catan Trade Build Settle",
        "Catan 2015 Reprint In Store Only",
        "Catan 5Th Edition",
        "Catan 5th Edition 'Settlers of Catan' Base Game",
        "CATAN BASE GAME FRENCH",
        "CATAN BASE GAME ENGLISH",
        "CATAN",
        "Settlers of Catan",
        "Settlers of Catan, The (Revised Edition) W/Cities and Knights Expansion",
        "Catan (2015 Refresh) - Base Game",
        "Catan Strategy 5th Edition",
        "Catan: Trade Build Settle Board Game"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1629324722072.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1629324722072.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1629324722072.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1629324722072.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324722072.jpg"
      },
      "description_preview": " The women and men of your expedition build the first two settlements. Fortunately, the land is rich in natural resources. You build roads and new settlements that eventually become cities. Will you succeed in gaining supremacy on Catan? Barter trade dominates the scene. Some resources you have in abundance, other resources are scarce. Ore for wool, brick for lumber - you trade according to what is needed for your current building projects. Proceed strategically! If you found your settlements in the right places and skillfully trade your resources, then the odds will be in your favor. But your opponents are smart too. \r\n To begin the game, we build the game board using hexagonal terrain tiles. Catan is born - a beautiful island with mountains, pastures, hills, fields, and forests, surrounded by the sea. \r\n Each of us places two small houses on spaces where three terrain hexes meet. They are our starting settlements. \r\n And so it begins. I roll two dice. An “11”! Each terrain hex is marked with a die roll number. Each player who owns a settlement adjacent to a terrain hex marked with the number rolled receives a resource produced by this hex. Hills produce brick, forests produce lumber, mountains produce ore, fields produce grain, and pastures produce wool. \r\n We use these resources to expand across Catan: we build roads and new settlements, or we upgrade our existing settlements to cities. For example, a road costs 1 brick and 1 lumber. If we do not have the necessary resources, we can acquire them by trading with our opponents. \r\n Each settlement is worth 1 victory point and each city is worth 2 victory points. If you expand cleverly, you may be the first player to reach 10 victory points and thus win the game! "
    },
    {
      "id": "E5TYKwLTf0",
      "handle": "catan-cities-and-knights-expansion",
      "url": "https://www.boardgameatlas.com/game/E5TYKwLTf0/catan-cities-and-knights-expansion",
      "bga_edit_url": "https://www.boardgameatlas.com/game/E5TYKwLTf0/edit",
      "template_url": "/products/listing?objectId=E5TYKwLTf0&product_line=Board Games&type=product",
      "name": "Catan: Cities & Knights",
      "price": "47.99",
      "price_ca": "38.59",
      "price_uk": "35.78",
      "price_au": "37.99",
      "msrp": 55,
      "msrps": [
        {
          "country": "UK",
          "price": 12.99
        },
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.13",
      "year_published": 1998,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "Dark clouds gather over the once peaceful landscape. Wild barbarians, lured by Catan’s wealth and power, maneuver to attack. Their massive warships loom against the bright orange horizon. You must be strong! Barbarians attack the weakest targets, and the victim of their onslaught will be the player who contributes the least to the defense of Catan.<br /><br /> Don’t take any chances! Field your knights!<br /><br /> In <b>Catan: Cities &amp; Knights</b> you engage in the defense of Catan and compete to build the three great metropolises of Catan. Each of these magnificent urban centers is even more valuable than a city. They’re also immune to the dangerous barbarians. Invest in city improvements, which you acquire using three commodities of trade: coin, paper, and cloth. If you improve your culture, muster your knights, and enrich your fine cities, you will be the master of the great realm of Catan!<br /><br /><b> Components:</b><br /> 36 Commodity Cards<br /> 54 Progress Cards<br /> 6 Victory Point Cards<br /> 3 Wooden Metropolis Pieces<br /> 1 Wooden Merchant Figure<br /> 1 Custom Event Die<br /> 1 Wooden Barbarian Ship<br /> 24 Wooden Knights<br /> 12 City Walls<br /> 4 Development Flip-Charts<br /> 1 Sea Frame Piece<br /> 1 Rulebook<br />",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "U3zhCQH7Et",
          "url": "https://www.boardgameatlas.com/mechanic/U3zhCQH7Et/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        },
        {
          "id": "QAYkTHK1Dd",
          "url": "https://www.boardgameatlas.com/category/QAYkTHK1Dd/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        }
      ],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "FG63HUGsWf",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/FG63HUGsWf/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9XxoqlxAVw",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9XxoqlxAVw/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "ja1W0hp62r",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ja1W0hp62r/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "sOdfXQmRBg",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/sOdfXQmRBg/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UMssR9EGlp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/UMssR9EGlp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LeyRDCEgWD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LeyRDCEgWD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9DlitZqr9J",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9DlitZqr9J/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "J8pMyONAQy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/J8pMyONAQy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "32liHCLQDl",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/32liHCLQDl/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "3dt1SS9Uhm",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/3dt1SS9Uhm/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "F8XIZ06AV1",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/F8XIZ06AV1/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "eQb3IOfYYF",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eQb3IOfYYF/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "m26fBgcJwz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m26fBgcJwz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "My6tXSDwGi",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/My6tXSDwGi/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "DGzIGrGHoR",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/DGzIGrGHoR/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Jason Hawkins",
        "Harald Lieske",
        "Michael Menzel",
        "Klaus Teuber",
        "Franz Vohwinkel",
        "Stephen Graham Walsh"
      ],
      "names": [],
      "rules_url": "http://www.catan.com/files/downloads/catan_ck_5th_ed_rules_150303.pdf",
      "amazon_rank": 4435,
      "official_url": "http://www.catan.com/game/catan-cities-knights-expansion#?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 158,
      "average_user_rating": 3.5573101265822786,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-11-25T02:23:00.312Z",
          "price": 36.99,
          "isLow": true
        },
        {
          "country": "CA",
          "date": "2022-01-11T23:30:18.592Z",
          "price": 39.99,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-10-09T16:53:50.109Z",
          "price": 35.78,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-12-29T21:23:40.106Z",
          "price": 47.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 3,
      "average_learning_complexity": 3,
      "average_strategy_complexity": 3,
      "visits": 1889,
      "lists": 416,
      "mentions": 8,
      "links": 1,
      "plays": 256,
      "rank": 309,
      "type": "expansion",
      "sku": "CNS3078",
      "upc": "029877030781",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3078",
        "2149270724",
        "2148757359",
        "2149146856",
        "2148960871",
        "ASM-BG-CTCK",
        "CN3077",
        "029877030774",
        "MFG3077",
        "81866",
        "029877030781",
        "29877030781",
        "2148249194",
        "2148995024",
        "29877030774",
        "43931 #0535",
        "7131:46814",
        "BG-000165-001",
        "CSICN3077",
        "FICAT04",
        "M01_CATAN_CITIES_CORE_SH",
        "MDGCA00606",
        "Ballarat|9c410355-60cf-fcb4-3d0c-8a6a4dda2258",
        "66537663",
        "MFG3065"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3078"
        },
        {
          "name": "Boarding School Games",
          "sku": "CN3077"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149270724"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148757359"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149146856"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148960871"
        },
        {
          "name": "Board Gaming With Education",
          "sku": "ASM-BG-CTCK"
        },
        {
          "name": "Card Haus",
          "sku": "CN3077"
        },
        {
          "name": "401 Games",
          "sku": "029877030774"
        },
        {
          "name": "Magic Madhouse",
          "sku": "MFG3077"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81866"
        },
        {
          "name": "Brimstone Games",
          "sku": "029877030781"
        },
        {
          "name": "Arctic Board Game",
          "sku": "29877030781"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148249194"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148995024"
        },
        {
          "name": "Board Game Supply",
          "sku": "29877030774"
        },
        {
          "name": "Funagain Games",
          "sku": "43931 #0535"
        },
        {
          "name": "BoardGameCo",
          "sku": "7131:46814"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000165-001"
        },
        {
          "name": "Legendesque",
          "sku": "CSICN3077"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT04"
        },
        {
          "name": "Gameology",
          "sku": "M01_CATAN_CITIES_CORE_SH"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA00606"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|9c410355-60cf-fcb4-3d0c-8a6a4dda2258"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "66537663"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3065"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=E5TYKwLTf0&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "60-90",
      "msrp_text": "$55.00",
      "price_text": "$47.99",
      "tags": [
        "Catan telepesei: Lovagok és Városok",
        "Catan: Borgir og riddarar",
        "Catan: Città e Cavalieri",
        "Catan: Ciudades y Caballeros",
        "Catan: Kaupungit ja Ritarit",
        "Catan: Lovagok és városok",
        "Catan: Miasta i Rycerze",
        "Catan: Miestai ir riteriai",
        "Catan: Städte & Ritter",
        "Catan: Steden & Ridders",
        "CATAN: Villes & Chevaliers",
        "Catan: Города и рыцари",
        "I Coloni di Catani: Città e Cavalieri",
        "Colonistii din Catan: Orase si Cavaleri",
        "Los Colonos de Catán: Ciudades y Caballeros",
        "Les Colons de Catane: Villes et Chevaliers",
        "Katanas ieceļotāji: Pilsētas un bruņiniek",
        "Katani asustajad: Linnad ja rüütlid",
        "Katano salos naujakuriai: Miestai ir riteriai",
        "De Kolonisten van Catan: Steden & Ridders",
        "Miasta i Rycerze z Catanu",
        "Naseljenci otoka Catan: Mesta in vitezi",
        "Osadníci z Katanu: rozšíření Města a rytíři",
        "Osadnicy z Catanu: Miasta i Rycerze",
        "Settlers fra Catan: Byer & Riddere",
        "The Settlers fra Catan: Byer og Riddere",
        "Settlers från Catan: Städer och Riddare",
        "Settlers of Catan: Cities & Knights",
        "The Settlers of Catan: Cities & Knights",
        "Die Siedler von Catan: Städte & Ritter",
        "Οι Άποικοι του Κατάν: Πόλεις και Ιππότες",
        "Οι πόλεις του Κατάν",
        "Колонизаторы. Города и рыцари",
        "המתיישבים של קטאן: ערים ואבירים",
        "カタンの開拓者たち 都市と騎士版",
        "卡坦島騎士擴充",
        "카탄 확장: 도시와 기사",
        "Catan: Cities & Knights",
        "Catan Expansion: Cities & Knights Board Game",
        "Catan: Cities and Knights Game Expansion - Ding & Dent",
        "Catan: Cities and Knights Game Expansion",
        "Catan: Cities & Knights Expansion 5th Edition with 5-6 Player Extension",
        "Catan Cities and Knights Expansion",
        "Catan Cities Knights 2015 Refresh",
        "Catan Cities andand Knights Edition",
        "Cities Knights Expansion Revised Edition Printing",
        "Catan Cities Knights",
        "Catan: Villes & Chevaliers (French Edition)",
        "Catan Exp.: Cities & Knights",
        "Catan Cities Knights 2015",
        "Catan - Cities & Knights",
        "Cities Knights of Catan The 1st Edition",
        "Catan Cities And Knights Game Expansion",
        "CATAN CITIES KNIGHTS",
        "Catan Cities Knights Expansion 5th Ed",
        "Catan Cities Knights Expansion",
        "Catan Cities and Knights 5 6 Player Extension",
        "Catan Cities Knights 5 6 Player Expansion"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257359245-51DYsPZcYyL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257359245-51DYsPZcYyL.jpg"
      },
      "description_preview": "Dark clouds gather over the once peaceful landscape. Wild barbarians, lured by Catan’s wealth and power, maneuver to attack. Their massive warships loom against the bright orange horizon. You must be strong! Barbarians attack the weakest targets, and the victim of their onslaught will be the player who contributes the least to the defense of Catan.   Don’t take any chances! Field your knights!   In  Catan: Cities & Knights  you engage in the defense of Catan and compete to build the three great metropolises of Catan. Each of these magnificent urban centers is even more valuable than a city. They’re also immune to the dangerous barbarians. Invest in city improvements, which you acquire using three commodities of trade: coin, paper, and cloth. If you improve your culture, muster your knights, and enrich your fine cities, you will be the master of the great realm of Catan!    Components:   36 Commodity Cards  54 Progress Cards  6 Victory Point Cards  3 Wooden Metropolis Pieces  1 Wooden Merchant Figure  1 Custom Event Die  1 Wooden Barbarian Ship  24 Wooden Knights  12 City Walls  4 Development Flip-Charts  1 Sea Frame Piece  1 Rulebook "
    },
    {
      "id": "EvYzPCnCGG",
      "handle": "catan-56-player-extension",
      "url": "https://www.boardgameatlas.com/game/EvYzPCnCGG/catan-56-player-extension",
      "bga_edit_url": "https://www.boardgameatlas.com/game/EvYzPCnCGG/edit",
      "template_url": "/products/listing?objectId=EvYzPCnCGG&product_line=Board Games&type=product",
      "name": "Catan: 5-6 Player Extension",
      "price": "26.39",
      "price_ca": "26.99",
      "price_uk": "18.00",
      "price_au": "38.95",
      "msrp": 30,
      "msrps": [
        {
          "country": "UK",
          "price": 24.99
        },
        {
          "country": "US",
          "price": 30
        }
      ],
      "discount": "0.12",
      "year_published": 1996,
      "min_players": 5,
      "max_players": 6,
      "player_counts": [
        5,
        6
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "Now five to six players can explore and settle Catan! In the Catan: 5-6 Player Extension you control a group of settlers exploring and taming the uncharted lands of Catan. Embark on a quest to settle the rich island, competing against more opponents for added fun. ● Add 1-2 more friends or family without sacrificing ease of play. ● Add green and brown settlers and expand your island with 2 more harbors and 11 unique, new terrain tiles. This is NOT a complete game! It is only a game extension for 5-6 players. You need a Catan game (aka The Settlers of Catan) in order to play with this extension! Components ● 11 Hexagonal Regional Tiles ● 2 Frame Pieces with Harbors ● 2 All-Sea Frame Pieces ● 10 Wooden Settlements ● 8 Wooden Cities ● 30 Wooden Roads ● 25 Resource Cards ● 9 Development Cards ● 28 Number Tokens",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "U3zhCQH7Et",
          "url": "https://www.boardgameatlas.com/mechanic/U3zhCQH7Et/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        }
      ],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Harald Lieske",
        "Michael Menzel",
        "Marion Pott",
        "Klaus Teuber",
        "Stephen Graham Walsh"
      ],
      "names": [],
      "rules_url": "https://www.catan.com/files/downloads/catan_5-6_5th_ed_rules_150303.pdf",
      "amazon_rank": 534,
      "official_url": "https://www.catan.com/game/settlers-catan-extension-5-6-players?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 170,
      "average_user_rating": 3.184432773109242,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-11-27T20:57:09.154Z",
          "price": 20.95,
          "isLow": true
        },
        {
          "country": "AU",
          "date": "2022-01-20T19:35:32.980Z",
          "price": 38.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-02-03T04:41:40.282Z",
          "price": 26.39,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2023-02-04T12:38:38.578Z",
          "price": 18,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 773,
      "lists": 541,
      "mentions": 1,
      "links": 1,
      "plays": 306,
      "rank": 361,
      "type": "expansion",
      "sku": "CNS3072",
      "upc": "029877030729",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3072",
        "029877030729",
        "ASMCN3072",
        "MDGCA00511",
        "81870",
        "99945",
        "66537618",
        "0688623907021",
        "MFG3072",
        "27133",
        "2148901530",
        "2149287443",
        "39948:23429",
        "43926 #0503",
        "BG-000206-001",
        "CSG1005",
        "CSICN3072",
        "FICAT02",
        "I032_CATAN_BASE_5-6EXT_SS",
        "KOS-FICAT02",
        "Ballarat|02dcd191-ae0b-11e8-ed44-629ff24beb8b",
        "+1+029877030729",
        "MFG3062"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3072"
        },
        {
          "name": "Games Paradise",
          "sku": "029877030729"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3072"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA00511"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81870"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "99945"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "66537618"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0688623907021"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "MFG3072"
        },
        {
          "name": "Hanabee",
          "sku": "27133"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148901530"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149287443"
        },
        {
          "name": "BoardGameCo",
          "sku": "39948:23429"
        },
        {
          "name": "Funagain Games",
          "sku": "43926 #0503"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000206-001"
        },
        {
          "name": "Board's Edge Games",
          "sku": "CSG1005"
        },
        {
          "name": "Legendesque",
          "sku": "CSICN3072"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT02"
        },
        {
          "name": "Gameology",
          "sku": "I032_CATAN_BASE_5-6EXT_SS"
        },
        {
          "name": "Philibert",
          "sku": "KOS-FICAT02"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae0b-11e8-ed44-629ff24beb8b"
        },
        {
          "name": "Boardgame Master",
          "sku": "+1+029877030729"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3062"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=EvYzPCnCGG&product_line=Board Games&type=product",
      "players": "5-6",
      "playtime": "60-90",
      "msrp_text": "$30.00",
      "price_text": "$26.39",
      "tags": [
        "Catan: 5-6 Player Extension",
        "Catan: 5-6 Player Extension (Fifth Edition)",
        "Catan extension pour 5 et 6 joueurs 2016",
        "Catan Edition Base Game 5 6 Player Extension",
        "Settlers of Catan The 5 6 Player Extension Revised Edition",
        "Catan 5-6 Player Extension",
        "Catan 5 6 Player Extension 2015 Refresh",
        "Catan Base Game Extension for 5 6 Players",
        "Settlers of Catan The Revised Edition",
        "Settlers of Catan The 5 6 Player Expansion Revised Edition",
        "Catan Extension: 5-6 Player",
        "Settlers of Catan The 5 6 Player Expansion Edition",
        "Catan 5 6 Player Extension",
        "Catan Base Game 5 6 Player Extension",
        "Catan: Le Jeu De Base - 5-6 Player Extension (French Edition)",
        "Catan Expansion: 5-6 Players",
        "Catan 5 6 Player Extension 2015",
        "Catan -  5-6 Player",
        "Catan 5 6 Player Expansion",
        "Settlers of Catan The 5 6 Player Expansion 1st Edition",
        "CATAN 5 6 PLAYER EXTENSION",
        "Catan 5 6 Player Extension 5th Edition",
        "CATAN 5 6 JOUEURS EXTENSION FRENCH",
        "Catan Extension 5 6 Player 5th Edition"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559254797611-51uLrWkNt0L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254797611-51uLrWkNt0L.jpg"
      },
      "description_preview": "Now five to six players can explore and settle Catan! In the Catan: 5-6 Player Extension you control a group of settlers exploring and taming the uncharted lands of Catan. Embark on a quest to settle the rich island, competing against more opponents for added fun. ● Add 1-2 more friends or family without sacrificing ease of play. ● Add green and brown settlers and expand your island with 2 more harbors and 11 unique, new terrain tiles. This is NOT a complete game! It is only a game extension for 5-6 players. You need a Catan game (aka The Settlers of Catan) in order to play with this extension! Components ● 11 Hexagonal Regional Tiles ● 2 Frame Pieces with Harbors ● 2 All-Sea Frame Pieces ● 10 Wooden Settlements ● 8 Wooden Cities ● 30 Wooden Roads ● 25 Resource Cards ● 9 Development Cards ● 28 Number Tokens"
    },
    {
      "id": "NoWy3nPYfj",
      "handle": "catan-seafarers-expansion",
      "url": "https://www.boardgameatlas.com/game/NoWy3nPYfj/catan-seafarers-expansion",
      "bga_edit_url": "https://www.boardgameatlas.com/game/NoWy3nPYfj/edit",
      "template_url": "/products/listing?objectId=NoWy3nPYfj&product_line=Board Games&type=product",
      "name": "Catan: Seafarers Expansion",
      "price": "44.10",
      "price_ca": "27.19",
      "price_uk": "0.00",
      "price_au": "38.00",
      "msrp": 55,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.20",
      "year_published": 1997,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>In Catan: Seafarers you control a group of bold seafaring settlers exploring and taming the wild, uncharted Isles of Catan. Each game brings you to new seas and new lands. You might even discover the precious gold fields (a very valuable new terrain).<br /><br />Every game is unique and full of fun!<br /><br />Embark on an epic quest to settle the home island, build ships, and chart nearby waters. Guide your brave seafarers to victory through cunning trades and wise development. Be first to create new sea lanes and settle the newly-discovered isles.<br /><br />The best strategy and a nice dash of luck decide who will be the undisputed ruler of the rich Isles of Catan!<br />Capture the adventure of seafaring, exploration, and trade.<br />Catan: Seafarers is a 3-4 player expansion for the best-selling Catan board game. Share some fun at sea!<br /><br />Components<br />60 Wooden Ships<br />1 Pirate Ship<br />6 Frame Pieces<br />19 Sea Hexes<br />11 Hexagonal Region Tiles<br />50 Catan Chits<br />10 Number Tokens<br />10 Harbor Tokens<br />1 Rulebook and Scenarios</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257503054-51u0777bL3L.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257503054-51u0777bL3L.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        }
      ],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LhiwjGd2o7",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LhiwjGd2o7/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "sOdfXQmRBg",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/sOdfXQmRBg/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "32liHCLQDl",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/32liHCLQDl/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "FG63HUGsWf",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/FG63HUGsWf/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7BR21d98Nq",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7BR21d98Nq/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UMssR9EGlp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/UMssR9EGlp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LeyRDCEgWD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LeyRDCEgWD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "P9ZfBj0BBq",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/P9ZfBj0BBq/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "EqSluthV2x",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/EqSluthV2x/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "ja1W0hp62r",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ja1W0hp62r/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "3dt1SS9Uhm",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/3dt1SS9Uhm/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9DlitZqr9J",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9DlitZqr9J/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "QZq0yTzciC",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/QZq0yTzciC/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "eQb3IOfYYF",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eQb3IOfYYF/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "My6tXSDwGi",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/My6tXSDwGi/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "m26fBgcJwz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m26fBgcJwz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "0Fuc5b5KIs",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/0Fuc5b5KIs/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [],
      "names": [],
      "rules_url": null,
      "amazon_rank": 2618,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 144,
      "average_user_rating": 3.3069444444444445,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-12-14T02:07:07.161Z",
          "price": 35.78,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2022-01-10T10:22:32.279Z",
          "price": 64.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-02T23:03:03.738Z",
          "price": 44.1,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-02-03T04:17:46.953Z",
          "price": 27.19,
          "isLow": true
        }
      ],
      "active": true,
      "num_user_complexity_votes": 2,
      "average_learning_complexity": 2,
      "average_strategy_complexity": 2,
      "visits": 1439,
      "lists": 454,
      "mentions": 1,
      "links": 0,
      "plays": 561,
      "rank": 389,
      "type": "expansion",
      "sku": "CNS3073",
      "upc": "029877030736",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3073",
        "2147919599",
        "ASMCN3073",
        "66537625",
        "029877030736",
        "L05_CATAN_SEA_M",
        "029877030743",
        "2148719846",
        "MFG3073",
        "MDGCA01917",
        "81865",
        "CSICN3073",
        "27194",
        "43935 #0142",
        "7141:25198",
        "BG-000166-001",
        "CNS3073",
        "CSG1003",
        "FICAT03",
        "Ballarat|f0c4e201-c66a-54eb-fed0-5769cc301ff4",
        "catan-seafarers-5&6-player-exp",
        "8435407618763"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3073"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2147919599"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3073"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "66537625"
        },
        {
          "name": "LVLUP GAMES",
          "sku": "029877030736"
        },
        {
          "name": "Gameology",
          "sku": "L05_CATAN_SEA_M"
        },
        {
          "name": "Good Games",
          "sku": "029877030743"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148719846"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3073"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA01917"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81865"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3073"
        },
        {
          "name": "Hanabee",
          "sku": "27194"
        },
        {
          "name": "Funagain Games",
          "sku": "43935 #0142"
        },
        {
          "name": "BoardGameCo",
          "sku": "7141:25198"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000166-001"
        },
        {
          "name": "Macronova Games",
          "sku": "CNS3073"
        },
        {
          "name": "Board's Edge Games",
          "sku": "CSG1003"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT03"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|f0c4e201-c66a-54eb-fed0-5769cc301ff4"
        },
        {
          "name": "Rollers",
          "sku": "catan-seafarers-5&6-player-exp"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "8435407618763"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=NoWy3nPYfj&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "60-90",
      "msrp_text": "$55.00",
      "price_text": "$44.10",
      "tags": [
        "CATAN: Marins",
        "Catan: Navegadores",
        "Catan: Navegantes",
        "Catan: Seefahrer",
        "De Kolonisten van Catan: De Zeevaarders",
        "Die Siedler von Catan: Seefahrer Erweiterung",
        "The Settlers of Catan: Seafarers",
        "The Settlers fra Catan: Sjøfarer",
        "The Settlers fra Catan: Søfarer",
        "Seafarers of Catan The Edition",
        "Catan Seafarers Expansion",
        "Catan 2015 Refresh Seafarers Expansion",
        "Catan Seafarers 2015 Refresh",
        "Catan Seafarers Game Expansion",
        "Siedler Von Catan Die Seefahrer Seafarers of Catan",
        "Catan: Seafarers Game Expansion 4th Edition",
        "Catan: Seafarers",
        "Catan Expansion Seafarers",
        "Catan Seafarers Edition",
        "Catan Seafarers",
        "Catan: Marins (French Edition)",
        "CATAN SEAFARERS",
        "Catan Seafarers 2015",
        "Catan Seafarers 5 6 Player Extension",
        "CATAN SEAFARERS 5 6 PLAYER EXTENSION",
        "Catan Seafarers 5 6 Player Expansion",
        "Catan Seafarers 5 6 Player Extension 2015",
        "Catan Exp.: Seafarers",
        "Catan - Seafarers",
        "Seafarers of Catan The 1st Edition",
        "Catan Seafarers Expansion 5th Ed",
        "Catan Seafarers 5th Edition",
        "Catan Marins Expansion"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257503054-51u0777bL3L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257503054-51u0777bL3L.jpg"
      },
      "description_preview": " In Catan: Seafarers you control a group of bold seafaring settlers exploring and taming the wild, uncharted Isles of Catan. Each game brings you to new seas and new lands. You might even discover the precious gold fields (a very valuable new terrain).  Every game is unique and full of fun!  Embark on an epic quest to settle the home island, build ships, and chart nearby waters. Guide your brave seafarers to victory through cunning trades and wise development. Be first to create new sea lanes and settle the newly-discovered isles.  The best strategy and a nice dash of luck decide who will be the undisputed ruler of the rich Isles of Catan! Capture the adventure of seafaring, exploration, and trade. Catan: Seafarers is a 3-4 player expansion for the best-selling Catan board game. Share some fun at sea!  Components 60 Wooden Ships 1 Pirate Ship 6 Frame Pieces 19 Sea Hexes 11 Hexagonal Region Tiles 50 Catan Chits 10 Number Tokens 10 Harbor Tokens 1 Rulebook and Scenarios "
    },
    {
      "id": "MiOTS94YV3",
      "handle": "catan-card-game",
      "url": "https://www.boardgameatlas.com/game/MiOTS94YV3/catan-card-game",
      "bga_edit_url": "https://www.boardgameatlas.com/game/MiOTS94YV3/edit",
      "template_url": "/products/listing?objectId=MiOTS94YV3&product_line=Board Games&type=product",
      "name": "Catan Card Game",
      "price": "0.00",
      "price_ca": "0.00",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 15,
      "msrps": [
        {
          "country": "US",
          "price": 15
        }
      ],
      "discount": "0.00",
      "year_published": 1996,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 45,
      "max_playtime": 60,
      "min_age": 10,
      "description": "<p>Cunning and a dash of luck decides who will be the undisputed master of Catan!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257476571-51iAbkahd1L.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257476571-51iAbkahd1L.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        }
      ],
      "publishers": [
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "7GTti1NuCH",
        "name": "Mayfair Games",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Tanja Donner",
        "Pete Fenlon",
        "Jason Hawkins",
        "Michaela Kienle",
        "Matt Schwabel",
        "Klaus Teuber",
        "Franz Vohwinkel",
        "Stephen Graham Walsh"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 719346,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 88,
      "average_user_rating": 3.078787878787879,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2021-11-30T21:53:55.365Z",
          "price": 248.1,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-07-19T09:33:59.688Z",
          "price": 49.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 301,
      "lists": 230,
      "mentions": 0,
      "links": 0,
      "plays": 173,
      "rank": 724,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2149204435",
        "2148904182",
        "7115:23405"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2149204435"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148904182"
        },
        {
          "name": "BoardGameCo",
          "sku": "7115:23405"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=MiOTS94YV3&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "45-60",
      "msrp_text": "$15.00",
      "price_text": "Price: N/A",
      "tags": [
        "Catan Telepesei: Kártyajáték",
        "Catan το παιχνίδι με κάρτες",
        "Catan: Jocul de carti",
        "Catanin uudisasukkaat: Korttipeli",
        "I Coloni di Catan: Gioco di Carte",
        "Colonistii din Catan jocul de carti",
        "Los colonos de Catán: El juego de cartas",
        "Les Colons de Catane: Le Jeu de Cartes",
        "De Kolonisten van Catan: Het Kaartspel",
        "Naseljenci otoka Catan: Igra s kartami",
        "Naseljenci otoka Catan: Igra s kartami za dva igralca",
        "Osadníci z Katanu: Karetní hra pro 2 hráče",
        "Osadnicy z Catanu: Gra Karciana",
        "The Settlers of Catan Card Game",
        "Die Siedler von Catan: Das Kartenspiel",
        "Die Siedler von Catan: Kartenspiel – Für zwei Spieler",
        "Карточные колонизаторы",
        "Колонизаторы. Карточная игра",
        "卡坦島紙牌版",
        "Catan Card Game Revised Edition",
        "Catan Card Game Edition",
        "Siedler Von Catan Die Das Kartenspiel"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257476571-51iAbkahd1L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257476571-51iAbkahd1L.jpg"
      },
      "description_preview": " Cunning and a dash of luck decides who will be the undisputed master of Catan! "
    },
    {
      "id": "tECB3ktBhP",
      "handle": "catan-cities-and-knights-56-player-extension",
      "url": "https://www.boardgameatlas.com/game/tECB3ktBhP/catan-cities-and-knights-56-player-extension",
      "bga_edit_url": "https://www.boardgameatlas.com/game/tECB3ktBhP/edit",
      "template_url": "/products/listing?objectId=tECB3ktBhP&product_line=Board Games&type=product",
      "name": "Catan: Cities & Knights 5-6 Player Extension",
      "price": "26.39",
      "price_ca": "33.99",
      "price_uk": "18.00",
      "price_au": "29.85",
      "msrp": 30,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 30
        }
      ],
      "discount": "0.12",
      "year_published": 2000,
      "min_players": 5,
      "max_players": 6,
      "player_counts": [
        5,
        6
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>Now up to 6 players can develop their cultures, build metropolises, and muster their knights against the scourge threatening Catan!<br /><br />Expand and inject even more excitement into your Cities &amp; Knights games without sacrificing ease of play.<br />Add more friends and family and even more drama to the award-winning game of culture, politics, trade, and conflict.<br /><br />NOT a complete game! You need a Catan game (aka The Settlers of Catan), a Catan: 5-6 Player extension, and a Catan: Cities &amp; Knights expansion in order to play with this great game extension!<br /><br /><strong> Components:</strong><br />18 Commodity Cards<br />3 Victory Point Cards<br />12 Wooden Knights<br />6 City Walls<br />2 Development Flip-Charts<br />1 Rulebook/Scenario Booklet</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254849801-51V-pZNL3hL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254849801-51V-pZNL3hL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "0bvxqCgoSm",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/0bvxqCgoSm/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "m26fBgcJwz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/m26fBgcJwz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "DGzIGrGHoR",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/DGzIGrGHoR/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [],
      "names": [],
      "rules_url": null,
      "amazon_rank": 9375,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 43,
      "average_user_rating": 3.4999999999999996,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-17T08:45:34.485Z",
          "price": 34.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-10-02T00:30:52.058Z",
          "price": 18,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2023-01-05T08:02:49.950Z",
          "price": 26.39,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-01-05T08:02:50.416Z",
          "price": 33.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 283,
      "lists": 149,
      "mentions": 0,
      "links": 0,
      "plays": 71,
      "rank": 811,
      "type": "expansion",
      "upc": "029877030781",
      "num_distributors": 2,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2149215831",
        "ASMCN3078",
        "029877030781",
        "CN3078",
        "MFG3078",
        "0688623907052",
        "0688623905522",
        "27137",
        "43930 #0",
        "7132:33443",
        "BG-000204-001",
        "CSICN3078",
        "F0144_CATAN_CITIES_5-6EXT_SS",
        "FICAT08",
        "COK06N",
        "2148946036",
        "Ballarat|02dcd191-ae0b-11e8-ed44-62a031c68161",
        "+1+029877030781",
        "3558380099604"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2149215831"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3078"
        },
        {
          "name": "401 Games",
          "sku": "029877030781"
        },
        {
          "name": "Gumnut",
          "sku": "CN3078"
        },
        {
          "name": "Advent Games",
          "sku": "MFG3078"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0688623907052"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0688623905522"
        },
        {
          "name": "Hanabee",
          "sku": "27137"
        },
        {
          "name": "Funagain Games",
          "sku": "43930 #0"
        },
        {
          "name": "BoardGameCo",
          "sku": "7132:33443"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000204-001"
        },
        {
          "name": "Legendesque",
          "sku": "CSICN3078"
        },
        {
          "name": "Gameology",
          "sku": "F0144_CATAN_CITIES_5-6EXT_SS"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT08"
        },
        {
          "name": "Philibert",
          "sku": "COK06N"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148946036"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae0b-11e8-ed44-62a031c68161"
        },
        {
          "name": "Boardgame Master",
          "sku": "+1+029877030781"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "3558380099604"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=tECB3ktBhP&product_line=Board Games&type=product",
      "players": "5-6",
      "playtime": "60-90",
      "msrp_text": "$30.00",
      "price_text": "$26.39",
      "tags": [
        "Catan: Ciudades y Caballeros – Expansión 5-6 Jugadores",
        "Catan: Kaupungit ja Ritarit, 5-6 lisäosa",
        "Catan: Miasta i Rycerze – Dodatek dla 5-6 graczy",
        "Catan: Städte und Ritter – Ergänzung 5 – 6 Spieler",
        "Catan: Steden & Ridders 5-6 Spelers",
        "Catane: Villes et Chevaliers 5 et 6 joueurs",
        "The Cities and Knights of Catan: 5-6 Player Expansion",
        "The Cities and Knights of Catan: 5-6 Player Extension",
        "Ciudades y Caballeros de Catán: Expansión 5-6 Jugadores",
        "De Kolonisten van Catan: Steden & Ridders (uitbreidingsset voor 5 of 6 spelers)",
        "Miasta i rycerze z Catanu: Dodatek dla 5-6 graczy",
        "The Settlers fra Catan: Byer & Riddere. Tillægssæt til 5-6 spillere",
        "Settlers från Catan: Städer & Riddare Expansion för 5-6 spelare",
        "Settlers of Catan: Cities & Knights – 5-6 Player Extension",
        "The Settlers of Catan: Cities & Knights – 5-6 Player Extension",
        "Die Siedler von Catan: Städte und Ritter Ergänzungssatz",
        "Колонизаторы: Города и рыцари – Расширение для 5-6 игроков",
        "卡坦島騎士5-6人擴充",
        "Catan 2015 Refresh Cities Knights 5 6 Player Extension",
        "Catan Cities Knights 5 6 Player Extension 2015 Refresh",
        "Catan: Cities & Knights - 5-6 Player Extension",
        "Settlers of Catan Ed Cities Knights Extension for 5 6 Players",
        "Cities Knights of Catan The 5 6 Player Expansion Edition",
        "Catan Cities Knights 5 6 Player Extension 5th Edition",
        "Catan Cities Knights 5 6 Player Extension",
        "Catan: Villes & Chevaliers - Extension Pour 5 et 6 Joueurs (French Edition)",
        "CATAN CITIES KNIGHTS 5 6 PLAYER EXTENSION",
        "Settlers of Catan 5th Ed Cities Knights Extension for 5 6 Players",
        "Catan Cities Knights 5 6 Player Extension 2015",
        "Catan - Cities & Knights 5-6 Player",
        "Cities Knights of Catan The 5 6 Player Expansion 1st Edition",
        "Catan: Cities and Knights 5-6 Player Extension - Ding & Dent",
        "CATAN VILLES ET CHEVALIERS 5 6 JOUEURS EXTENSION FRENCH",
        "Catan Cities 38 Knights 5 6 Player Game Extension Pack"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559254849801-51V-pZNL3hL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559254849801-51V-pZNL3hL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559254849801-51V-pZNL3hL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559254849801-51V-pZNL3hL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254849801-51V-pZNL3hL.jpg"
      },
      "description_preview": " Now up to 6 players can develop their cultures, build metropolises, and muster their knights against the scourge threatening Catan!  Expand and inject even more excitement into your Cities & Knights games without sacrificing ease of play. Add more friends and family and even more drama to the award-winning game of culture, politics, trade, and conflict.  NOT a complete game! You need a Catan game (aka The Settlers of Catan), a Catan: 5-6 Player extension, and a Catan: Cities & Knights expansion in order to play with this great game extension!    Components:  18 Commodity Cards 3 Victory Point Cards 12 Wooden Knights 6 City Walls 2 Development Flip-Charts 1 Rulebook/Scenario Booklet "
    },
    {
      "id": "Wp2pGHZHIO",
      "handle": "catan-seafarers-56-player-extension",
      "url": "https://www.boardgameatlas.com/game/Wp2pGHZHIO/catan-seafarers-56-player-extension",
      "bga_edit_url": "https://www.boardgameatlas.com/game/Wp2pGHZHIO/edit",
      "template_url": "/products/listing?objectId=Wp2pGHZHIO&product_line=Board Games&type=product",
      "name": "Catan: Seafarers 5-6 Player Extension",
      "price": "26.39",
      "price_ca": "32.95",
      "price_uk": "18.00",
      "price_au": "29.85",
      "msrp": 22.5,
      "msrps": [
        {
          "country": "US",
          "price": 22.5
        },
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        }
      ],
      "discount": "-0.17",
      "year_published": 1999,
      "min_players": 5,
      "max_players": 6,
      "player_counts": [
        5,
        6
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>Now five to six players can sail into the wild, uncharted seas and explore and settle the many mysterious islands near Catan!<br /><br />Add one or two more opponents without sacrificing ease of play.<br /><br />Try one of 9 new scenarios! This rich extension adds even more drama to the award-winning game of seafaring, discovery, and trade.<br /><br />Settle islands, build ships, and chart the nearby waters.<br />Discover far-off mines and use your gold and resources to become the undisputed ruler of Catan!<br /><br />NOT a complete game! You need a Catan game (aka The Settlers of Catan), a Catan: 5-6 Player extension, and a Catan: Seafarers expansion in order to play with this game extension!<br /><br />Components<br />30 Wooden Ships<br />7 Sea Tiles<br />2 Gold Field Tiles<br />1 Desert Tile<br />2 Frame Pieces<br />2 Harbor Tokens<br />35 Catan Chits<br />9 Exciting New Scenarios<br />1 Rulebook</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254869479-51XMaRqBcJL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254869479-51XMaRqBcJL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UMssR9EGlp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/UMssR9EGlp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "DGzIGrGHoR",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/DGzIGrGHoR/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [],
      "names": [],
      "rules_url": null,
      "amazon_rank": 5113,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 42,
      "average_user_rating": 3.4702380952380953,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-05T18:25:44.188Z",
          "price": 34.14,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-12-11T17:53:33.752Z",
          "price": 18,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-01-01T07:56:53.327Z",
          "price": 32.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-05T02:02:55.101Z",
          "price": 26.39,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 292,
      "lists": 175,
      "mentions": 0,
      "links": 0,
      "plays": 67,
      "rank": 891,
      "type": "expansion",
      "sku": "CNS3074",
      "upc": "029877030743",
      "num_distributors": 6,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3074",
        "ASMCN3074",
        "029877030743",
        "MDGCA01918",
        "81871",
        "MFG3074",
        "8435407618084",
        "27195-VR",
        "Ballarat|d22e136f-a145-c236-2fa7-48bc862f936b",
        "27195",
        "2148946450",
        "43934 #0363",
        "7142:33459",
        "BG-000184-001",
        "CSICN3074",
        "F0142_CATAN_SEA_5-6EXT_SS",
        "FICAT07",
        "200121107",
        "KOS-FICAT03"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3074"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3074"
        },
        {
          "name": "401 Games",
          "sku": "029877030743"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA01918"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81871"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "MFG3074"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "8435407618084"
        },
        {
          "name": "Harvey Norman",
          "sku": "27195-VR"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|d22e136f-a145-c236-2fa7-48bc862f936b"
        },
        {
          "name": "Hanabee",
          "sku": "27195"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148946450"
        },
        {
          "name": "Funagain Games",
          "sku": "43934 #0363"
        },
        {
          "name": "BoardGameCo",
          "sku": "7142:33459"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000184-001"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3074"
        },
        {
          "name": "Gameology",
          "sku": "F0142_CATAN_SEA_5-6EXT_SS"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT07"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "200121107"
        },
        {
          "name": "Philibert",
          "sku": "KOS-FICAT03"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=Wp2pGHZHIO&product_line=Board Games&type=product",
      "players": "5-6",
      "playtime": "60-90",
      "msrp_text": "$22.50",
      "price_text": "$26.39",
      "tags": [
        "The Settlers of Catan: Seafarers – 5-6 Player Extension",
        "Settlers från Catan: Sjöfarare Expansion för 5-6 spelare",
        "The Seafarers of Catan: 5-6 Player Extension",
        "The Seafarers of Catan: 5-6 Player Expansion",
        "Navegantes de Catán: Expansión 5-6 Jugadores",
        "Les Marins de Catane: Extension 5-6 joueurs",
        "De Kolonisten van Catan: De Zeevaarders (uitbreidingsset voor 5 of 6 Spelers)",
        "Catane: Marins 5 et 6 joueurs",
        "Die Siedler von Catan: Seefahrer – Ergänzung",
        "Catan Seafarers Extension for 5 6 Players",
        "Catan 2015 Refresh Seafarers 5 6 Player Extension",
        "Catan Seafarers 5 6 Player Extension 2015 Refresh",
        "Siedler von Catan Die Seefahrer 5 6 Player Extension",
        "Seafarers of Catan The 5 6 Player Expansion Edition",
        "Catan: Seafarers - 5-6 Player Extension",
        "Catan Seafarers Game 5 6 Player Expansion Edition",
        "Catan Seafarers 5 6 Player Extension",
        "Catan: Marins - Extension Pour 5 Et 6 Joueurs (French Edition)",
        "Catan: Seafarers 5-6 Player Extension",
        "Catan - Seafarers 5-6 Player",
        "Seafarers of Catan The 5 6 Player Expansion 1st Edition",
        "Catan Seafarers 5 6 Player Extension 5th Edition",
        "Catan Seafarers Expansion 5 6 Player Extension",
        "Catan Seafarers 5 6 Player Extension 5th Ed",
        "CATAN MARINS 5 6 JOUEURS EXTENSION FRENCH",
        "Catan Seafarers 5 6 Player Expansion"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559254869479-51XMaRqBcJL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559254869479-51XMaRqBcJL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559254869479-51XMaRqBcJL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559254869479-51XMaRqBcJL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559254869479-51XMaRqBcJL.jpg"
      },
      "description_preview": " Now five to six players can sail into the wild, uncharted seas and explore and settle the many mysterious islands near Catan!  Add one or two more opponents without sacrificing ease of play.  Try one of 9 new scenarios! This rich extension adds even more drama to the award-winning game of seafaring, discovery, and trade.  Settle islands, build ships, and chart the nearby waters. Discover far-off mines and use your gold and resources to become the undisputed ruler of Catan!  NOT a complete game! You need a Catan game (aka The Settlers of Catan), a Catan: 5-6 Player extension, and a Catan: Seafarers expansion in order to play with this game extension!  Components 30 Wooden Ships 7 Sea Tiles 2 Gold Field Tiles 1 Desert Tile 2 Frame Pieces 2 Harbor Tokens 35 Catan Chits 9 Exciting New Scenarios 1 Rulebook "
    },
    {
      "id": "iSVnYdrsZQ",
      "handle": "rivals-for-catan",
      "url": "https://www.boardgameatlas.com/game/iSVnYdrsZQ/rivals-for-catan",
      "bga_edit_url": "https://www.boardgameatlas.com/game/iSVnYdrsZQ/edit",
      "template_url": "/products/listing?objectId=iSVnYdrsZQ&product_line=Board Games&type=product",
      "name": "Rivals for Catan",
      "price": "21.59",
      "price_ca": "24.95",
      "price_uk": "19.87",
      "price_au": "38.95",
      "msrp": 25,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 25
        }
      ],
      "discount": "0.14",
      "year_published": 2010,
      "min_players": 2,
      "max_players": 2,
      "player_counts": [
        2
      ],
      "min_playtime": 30,
      "max_playtime": 90,
      "min_age": 11,
      "description": "<p>Build your domain to best your Rivals.<br /><br />The Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your under card mix to create your own principality. Explore and settle new lands, acquiring resources through card play and the luck of the dice. Use gold, response combinations, and trade to develop your domain. <br /><br />Expand your settlements and cities recruit heroes, and defend your lands through politics, invention, and intrigue. Your cunning and a dash of luck decides who will be Prince of Catan.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1610427446373",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1610427446373",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        },
        {
          "id": "ODWOjWAJj3",
          "url": "https://www.boardgameatlas.com/category/ODWOjWAJj3/undefined"
        },
        {
          "id": "QAYkTHK1Dd",
          "url": "https://www.boardgameatlas.com/category/QAYkTHK1Dd/undefined"
        }
      ],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "ja1W0hp62r",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ja1W0hp62r/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "QZq0yTzciC",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/QZq0yTzciC/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "EqSluthV2x",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/EqSluthV2x/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Michael Menzel"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 16244,
      "official_url": "http://www.catan.com/game/rivals-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 64,
      "average_user_rating": 3.2187500000000004,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-09-14T15:57:01.796Z",
          "price": 38.95,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-01-28T13:10:15.138Z",
          "price": 24.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-02-06T19:57:18.718Z",
          "price": 21.59,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2023-02-07T12:42:44.177Z",
          "price": 19.87,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 913,
      "lists": 236,
      "mentions": 0,
      "links": 1,
      "plays": 253,
      "rank": 924,
      "type": "game",
      "sku": "CNS3134",
      "upc": "029877031344",
      "num_distributors": 6,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2149196669",
        "CN3131",
        "Ballarat|eed2d917-f278-4021-bfe6-72814ad3c881",
        "MDGRI02221",
        "87514",
        "CN3134",
        "cn3131",
        "029877031313",
        "74432",
        "18087",
        "2148521510",
        "29877031313",
        "39878:40574",
        "47247 #0184",
        "BG-001297-001",
        "CSICN3131",
        "D0727_CATAN_RIVAL_2PLAY_SS",
        "FICATD01",
        "MFG3131",
        "B-BG-CN3700",
        "KOS-FICATD01",
        "CRDHS-D129B3EF",
        "8435407622074"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2149196669"
        },
        {
          "name": "Boarding School Games",
          "sku": "CN3131"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|eed2d917-f278-4021-bfe6-72814ad3c881"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGRI02221"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "87514"
        },
        {
          "name": "Dragon’s Den Games",
          "sku": "CN3134"
        },
        {
          "name": "gameknight.ca",
          "sku": "cn3131"
        },
        {
          "name": "Arctic Board Game",
          "sku": "029877031313"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "74432"
        },
        {
          "name": "Hanabee",
          "sku": "18087"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148521510"
        },
        {
          "name": "Board Game Supply",
          "sku": "29877031313"
        },
        {
          "name": "BoardGameCo",
          "sku": "39878:40574"
        },
        {
          "name": "Funagain Games",
          "sku": "47247 #0184"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-001297-001"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3131"
        },
        {
          "name": "Gameology",
          "sku": "D0727_CATAN_RIVAL_2PLAY_SS"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICATD01"
        },
        {
          "name": "Wayland Games",
          "sku": "MFG3131"
        },
        {
          "name": "Magic Madhouse",
          "sku": "B-BG-CN3700"
        },
        {
          "name": "Philibert",
          "sku": "KOS-FICATD01"
        },
        {
          "name": "Card Haus",
          "sku": "CRDHS-D129B3EF"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "8435407622074"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=iSVnYdrsZQ&product_line=Board Games&type=product",
      "players": "2",
      "playtime": "30-90",
      "msrp_text": "$25.00",
      "price_text": "$21.59",
      "tags": [
        "The Rivals for Catan",
        "Catan Duel",
        "Catan: Das Duell",
        "Catan: El duelo",
        "Catan: Het Duel",
        "Catan: Il Duello",
        "Die Fürsten von Catan",
        "Knížata z Katanu",
        "Les Princes de Catane",
        "Los Príncipes de Catán",
        "De Vorsten van Catan",
        "Колонизаторы: Князья Катана",
        "Крале и Владетели на Катан",
        "Catan: O Duelo",
        "Catan: Duelul",
        "Rivals for Catan The",
        "Rivals For Catan",
        "Rivals for Catan",
        "Rivals for Catan Base Edition",
        "Settlers of Catan Rivals for Catan",
        "Settlers Of Catan Rivals For Catan",
        "Catan Duel (French Edition)",
        "Rivals of Catan",
        "Rivals for Catan 2 Player Card Game",
        "CATAN Rivals for Catan",
        "Rivals For Catan 2 Player Card Game",
        "Rivals for Catan Deluxe",
        "Rivals for Catan Deluxe Edition",
        "Rivals For Catan Deluxe",
        "RIVALS FOR CATAN"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1610427446373",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1610427446373",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1610427446373",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1610427446373",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1610427446373"
      },
      "description_preview": " Build your domain to best your Rivals.  The Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your under card mix to create your own principality. Explore and settle new lands, acquiring resources through card play and the luck of the dice. Use gold, response combinations, and trade to develop your domain.   Expand your settlements and cities recruit heroes, and defend your lands through politics, invention, and intrigue. Your cunning and a dash of luck decides who will be Prince of Catan. "
    },
    {
      "id": "l2i97dfuvD",
      "handle": "star-trek-catan",
      "url": "https://www.boardgameatlas.com/game/l2i97dfuvD/star-trek-catan",
      "bga_edit_url": "https://www.boardgameatlas.com/game/l2i97dfuvD/edit",
      "template_url": "/products/listing?objectId=l2i97dfuvD&product_line=Board Games&type=product",
      "name": "Star Trek: Catan",
      "price": "0.00",
      "price_ca": "82.99",
      "price_uk": "0.00",
      "price_au": "87.99",
      "msrp": 49.5,
      "msrps": [
        {
          "country": "US",
          "price": 49.5
        },
        {
          "country": "UK",
          "price": 64.99
        }
      ],
      "discount": "0.00",
      "year_published": 2012,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 75,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>SPACE...<br /><br />...the Final Frontier. The many resource rich planets within the limits of Federation territory await exploration and settlement. Build outposts and star bases to extract the resources. Using your fleet of starships, establish supply routes that enable you to boldly go further into deep space. Avoid resource shortages by trading with your opponents and Federation neighbors. If your opponents venture too far into your space, though, you might need to divert the Klingons to drive them away... because in the end, only one can be the Federation's greatest hero! Take up the challenge!<br /><br />STAR TREK CATAN transports the timeless game concept of the world's most acclaimed board game-THE SETTLERS OF CATAN-into the exciting Star Trek universe. The popular characters of the Starship Enterprise come into play through novel new &quot;support cards.&quot; Build, trade and settle where no one has gone before!<br /><br />Since 1966, millions of Star Trek� fans all over the world have watched the adventures of the Starship Enterprise, Captain Kirk, and Mr. Spock. And since 1995, millions of enthusiastic players all over the world have played Klaus Teuber's The Settlers of Catan�-a board game classic.<br /><br />It's time to bring them all together on the Final Frontier!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "U3zhCQH7Et",
          "url": "https://www.boardgameatlas.com/mechanic/U3zhCQH7Et/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [
        {
          "id": "Sod2YBWMKi",
          "url": "https://www.boardgameatlas.com/category/Sod2YBWMKi/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        },
        {
          "id": "3B3QpKvXD3",
          "url": "https://www.boardgameatlas.com/category/3B3QpKvXD3/undefined"
        }
      ],
      "publishers": [
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "1LE7oe5KVZ",
        "name": "Asmodee",
        "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/asmodee"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Franz Vohwinkel",
        "Imelda Vohwinkel"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 225090,
      "cs_rating": 4.3,
      "official_url": "http://www.catan.com/game/star-trek-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 47,
      "average_user_rating": 3.523191489361702,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-02-16T01:10:31.087Z",
          "price": 87.99,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2021-11-23T09:35:37.641Z",
          "price": 179.97,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2021-12-01T04:53:45.832Z",
          "price": 39.75,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-09-30T11:43:27.278Z",
          "price": 94.95,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 729,
      "lists": 193,
      "mentions": 0,
      "links": 0,
      "plays": 66,
      "rank": 1018,
      "type": "game",
      "sku": "CNS3003",
      "upc": "029877030033",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "ASMCN3003",
        "CN3003",
        "029877030033",
        "2149291713",
        "36379:168904",
        "2148783212",
        "MFG3003"
      ],
      "sku_objects": [
        {
          "name": "Card Haus",
          "sku": "ASMCN3003"
        },
        {
          "name": "Apt to Game",
          "sku": "CN3003"
        },
        {
          "name": "Game Kastle",
          "sku": "029877030033"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149291713"
        },
        {
          "name": "BoardGameCo",
          "sku": "36379:168904"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148783212"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3003"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=l2i97dfuvD&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "75-90",
      "msrp_text": "$49.50",
      "price_text": "Price: N/A",
      "tags": [
        "Star Trek Catan",
        "Star Trek Catan Edition",
        "Star Trek: Catan",
        "Star Trek Catan 1st Edition",
        "Star Trek Catan Dinged Dented 20 off at checkout",
        "CATAN STAR TREK EDITION",
        "Star Trek Catan 2nd Edition",
        "Star Trek: Catane"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559253947477-61rFuGiFBWL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559253947477-61rFuGiFBWL.jpg"
      },
      "description_preview": " SPACE...  ...the Final Frontier. The many resource rich planets within the limits of Federation territory await exploration and settlement. Build outposts and star bases to extract the resources. Using your fleet of starships, establish supply routes that enable you to boldly go further into deep space. Avoid resource shortages by trading with your opponents and Federation neighbors. If your opponents venture too far into your space, though, you might need to divert the Klingons to drive them away... because in the end, only one can be the Federation's greatest hero! Take up the challenge!  STAR TREK CATAN transports the timeless game concept of the world's most acclaimed board game-THE SETTLERS OF CATAN-into the exciting Star Trek universe. The popular characters of the Starship Enterprise come into play through novel new \"support cards.\" Build, trade and settle where no one has gone before!  Since 1966, millions of Star Trek� fans all over the world have watched the adventures of the Starship Enterprise, Captain Kirk, and Mr. Spock. And since 1995, millions of enthusiastic players all over the world have played Klaus Teuber's The Settlers of Catan�-a board game classic.  It's time to bring them all together on the Final Frontier! "
    },
    {
      "id": "ULWQvi77f5",
      "handle": "catan-junior",
      "url": "https://www.boardgameatlas.com/game/ULWQvi77f5/catan-junior",
      "bga_edit_url": "https://www.boardgameatlas.com/game/ULWQvi77f5/edit",
      "template_url": "/products/listing?objectId=ULWQvi77f5&product_line=Board Games&type=product",
      "name": "Catan: Junior",
      "price": "27.00",
      "price_ca": "35.95",
      "price_uk": "0.00",
      "price_au": "39.95",
      "msrp": 30,
      "msrps": [
        {
          "country": "US",
          "price": 30
        },
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        }
      ],
      "discount": "0.10",
      "year_published": 2011,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 30,
      "max_playtime": 30,
      "min_age": 5,
      "description": "<p><strong>Catan: Junior</strong> takes place on a ring of islands where 2 to 4 players build hideouts, and the mysterious Spooky Island, where the Ghost Captain lives. Each island generates a specific resource: wood, goats, rum or swords and players can acquire gold. <br /><br />Each player starts with two pirate hideouts, then builds ships in order to expand their network. The more hideouts you build, the more resources you may receive. You use your resources to build ships, hideouts or get help from Coco the Parrot. Just watch out for the dreaded Ghost Captain!<br /><br />Be the first player to control seven pirate hideouts and you win the game!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1635861914971",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1635861914971",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        }
      ],
      "categories": [
        {
          "id": "HKaYVNIxAJ",
          "url": "https://www.boardgameatlas.com/category/HKaYVNIxAJ/undefined"
        },
        {
          "id": "vqZ5XzGWQD",
          "url": "https://www.boardgameatlas.com/category/vqZ5XzGWQD/undefined"
        },
        {
          "id": "9EIayX6n5a",
          "url": "https://www.boardgameatlas.com/category/9EIayX6n5a/undefined"
        }
      ],
      "publishers": [
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "7GTti1NuCH",
        "name": "Mayfair Games",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Patricia Raubo"
      ],
      "names": [],
      "rules_url": "https://www.catan.com/files/downloads/catan_junior_rules_160420s.pdf",
      "amazon_rank": 5265,
      "cs_rating": 3.8,
      "official_url": "https://www.catan.com/game/catan-junior#?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 54,
      "average_user_rating": 3.2314814814814814,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-11-21T09:17:59.872Z",
          "price": 39.95,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2022-10-15T17:54:21.246Z",
          "price": 23.85,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-01-02T01:56:29.210Z",
          "price": 35.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-29T04:11:30.406Z",
          "price": 27,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 655,
      "lists": 199,
      "mentions": 2,
      "links": 0,
      "plays": 265,
      "rank": 1078,
      "type": "game",
      "upc": "029877030255",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "029877030255",
        "CN3025",
        "2147865259",
        "2148895971",
        "43929 #0371",
        "63113:67168",
        "7137:7291",
        "BG-000301-001",
        "CNS3025",
        "CSG1002",
        "CSICN3025",
        "I051_CATAN_JUNIOR_SH",
        "MFG3025"
      ],
      "sku_objects": [
        {
          "name": "401 Games",
          "sku": "029877030255"
        },
        {
          "name": "Board Game Bandit",
          "sku": "CN3025"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2147865259"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148895971"
        },
        {
          "name": "Funagain Games",
          "sku": "43929 #0371"
        },
        {
          "name": "BoardGameCo",
          "sku": "63113:67168"
        },
        {
          "name": "BoardGameCo",
          "sku": "7137:7291"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000301-001"
        },
        {
          "name": "Macronova Games",
          "sku": "CNS3025"
        },
        {
          "name": "Board's Edge Games",
          "sku": "CSG1002"
        },
        {
          "name": "Legendesque",
          "sku": "CSICN3025"
        },
        {
          "name": "Gameology",
          "sku": "I051_CATAN_JUNIOR_SH"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3025"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=ULWQvi77f5&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "30",
      "msrp_text": "$30.00",
      "price_text": "$27.00",
      "tags": [
        "Catan Junior Printing",
        "Catan Junior board game",
        "Catan Junior",
        "Catan Junior Version",
        "CATAN JUNIOR",
        "Catan Junior 1st Printing",
        "Catan Junior 2nd Printing",
        "Catan: Junior",
        "Catan Junior Game"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1635861914971",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1635861914971",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1635861914971",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1635861914971",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1635861914971"
      },
      "description_preview": "  Catan: Junior  takes place on a ring of islands where 2 to 4 players build hideouts, and the mysterious Spooky Island, where the Ghost Captain lives. Each island generates a specific resource: wood, goats, rum or swords and players can acquire gold.   Each player starts with two pirate hideouts, then builds ships in order to expand their network. The more hideouts you build, the more resources you may receive. You use your resources to build ships, hideouts or get help from Coco the Parrot. Just watch out for the dreaded Ghost Captain!  Be the first player to control seven pirate hideouts and you win the game! "
    },
    {
      "id": "b7EIdXzESo",
      "handle": "starfarers-of-catan",
      "url": "https://www.boardgameatlas.com/game/b7EIdXzESo/starfarers-of-catan",
      "bga_edit_url": "https://www.boardgameatlas.com/game/b7EIdXzESo/edit",
      "template_url": "/products/listing?objectId=b7EIdXzESo&product_line=Board Games&type=product",
      "name": "Starfarers of Catan",
      "price": "79.20",
      "price_ca": "0.00",
      "price_uk": "0.00",
      "price_au": "131.99",
      "msrp": 99,
      "msrps": [
        {
          "country": "US",
          "price": 99
        }
      ],
      "discount": "0.20",
      "year_published": 2000,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 90,
      "max_playtime": 150,
      "min_age": 12,
      "description": "Compete for the prestigious post of Ambassador to the Galactic Council. To attain this lofty position, players must leave Terra and the known planets to explore and colonize the galaxy, while working to establish trade with alien cultures, encounter aliens and defeat pirates. Victory to the brave and astute explorer who luck smiles upon. Each player begins with two Colonies and a Space Port (all components are made from plastic). The Space Port makes starships to transport your new colonies and trade posts to distant lands. Throughout the game all the colonies and spaceports enable the production of resources when the dice match the numbers of adjacent planets. Resources are traded for colony ships, trade ships, and fleet upgrades of freight rings, booster rockets, and cannon. Beware as you explore -- some planets are covered in ice, and some conceal dangerous pirates. For 3 to 4 players.",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257687376-515JKFRYC2L.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257687376-515JKFRYC2L.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [],
      "primary_publisher": {
        "name": "Mayfair Games",
        "id": "7GTti1NuCH",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": "https://www.catan.com/files/downloads/starfarers_4p_rules_v4-0.pdf",
      "amazon_rank": 1007410,
      "official_url": "https://www.catan.com/game/starfarers-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 41,
      "average_user_rating": 3.3414634146341475,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-07-21T19:57:02.605Z",
          "price": 127.99,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2021-12-08T00:52:49.595Z",
          "price": 79.19,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-15T23:39:03.740Z",
          "price": 109.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-05T02:19:23.159Z",
          "price": 79.2,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 568,
      "lists": 134,
      "mentions": 0,
      "links": 0,
      "plays": 51,
      "rank": 1267,
      "type": "game",
      "sku": "CNS3005",
      "upc": "029877030057",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2148952945",
        "2149206113",
        "029877030057",
        "1910773415987",
        "2148903760",
        "36503:153319",
        "44871 #0631",
        "93355:176840",
        "CN3005",
        "2148300681",
        "2148178065"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2148952945"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149206113"
        },
        {
          "name": "Game Kastle",
          "sku": "029877030057"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "1910773415987"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148903760"
        },
        {
          "name": "BoardGameCo",
          "sku": "36503:153319"
        },
        {
          "name": "Funagain Games",
          "sku": "44871 #0631"
        },
        {
          "name": "BoardGameCo",
          "sku": "93355:176840"
        },
        {
          "name": "Boardlandia",
          "sku": "CN3005"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148300681"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148178065"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=b7EIdXzESo&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "90-150",
      "msrp_text": "$99.00",
      "price_text": "$79.20",
      "tags": [
        "The Starfarers of Catan",
        "Starfarers of Catan *PRE-ORDER*",
        "Sternenfahrer Von Catan Die Starfarers of Catan",
        "Starfarers of Catan The Edition",
        "Starfarers of Catan The 1st Edition"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257687376-515JKFRYC2L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257687376-515JKFRYC2L.jpg"
      },
      "description_preview": "Compete for the prestigious post of Ambassador to the Galactic Council. To attain this lofty position, players must leave Terra and the known planets to explore and colonize the galaxy, while working to establish trade with alien cultures, encounter aliens and defeat pirates. Victory to the brave and astute explorer who luck smiles upon. Each player begins with two Colonies and a Space Port (all components are made from plastic). The Space Port makes starships to transport your new colonies and trade posts to distant lands. Throughout the game all the colonies and spaceports enable the production of resources when the dice match the numbers of adjacent planets. Resources are traded for colony ships, trade ships, and fleet upgrades of freight rings, booster rockets, and cannon. Beware as you explore -- some planets are covered in ice, and some conceal dangerous pirates. For 3 to 4 players."
    },
    {
      "id": "xViD75B4N1",
      "handle": "starship-catan",
      "url": "https://www.boardgameatlas.com/game/xViD75B4N1/starship-catan",
      "bga_edit_url": "https://www.boardgameatlas.com/game/xViD75B4N1/edit",
      "template_url": "/products/listing?objectId=xViD75B4N1&product_line=Board Games&type=product",
      "name": "Starship Catan",
      "price": "184.99",
      "price_ca": "0.00",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 0,
      "msrps": [
        {
          "country": "US",
          "price": 0
        }
      ],
      "discount": "0.00",
      "year_published": 2001,
      "min_players": 2,
      "max_players": 2,
      "player_counts": [
        2
      ],
      "min_playtime": 60,
      "max_playtime": 60,
      "min_age": 12,
      "description": "In a flash, two Starfarers from the Catan space fleet have been thrown through a mysterious wormhole into an unknown galaxy. Lost, dazed and unable to find their way home, and with limited resources, the brave explorers face a seemingly hopeless situation, until they meet four peaceful alien races. These friendly aliens offer them limited aid and will guide them home if they can meet the high standards required for entrance into the Galactic Advisory Council. Take the role of a Starfarer! Daringly brave the unknown reaches of space! Explore and colonize new worlds, strike vital trade agreements and perform missions of mercy, while improving and preparing your Starship for the journey home. If you work hard and choose your course carefully and vigorously, you will attain membership in the Council and learn the way home!Beware! Not every alien in the galaxy will look upon you with friendliness. Dastardly space pirates desire your wealth and influence. Their raids are merciless, and their strength is growing! Be careful as you speed through the unknown! Only a careful balance of colonization and trade, bravery and caution, will lead you and your crew home.Lost in the depths of space? Not a problem for a real Starfarer! Activate your boosters for an adventure of space discovery!",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257943503-615XH46133L.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257943503-615XH46133L.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "hmipYN1R1I",
          "url": "https://www.boardgameatlas.com/mechanic/hmipYN1R1I/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Mayfair Games",
        "id": "7GTti1NuCH",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Tanja Donner",
        "Franz Vohwinkel"
      ],
      "names": [
        "Objectif Catane",
        "De ruimteschepen van Catan",
        "Sternenschiff Catan",
        "卡坦太空號"
      ],
      "rules_url": null,
      "amazon_rank": 370152,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 42,
      "average_user_rating": 3.214285714285715,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2022-01-13T04:09:44.329Z",
          "price": 409.55,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2022-03-31T01:12:26.028Z",
          "price": 184.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 288,
      "lists": 123,
      "mentions": 0,
      "links": 0,
      "plays": 54,
      "rank": 1278,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "36533:22959",
        "2149213652",
        "2149104706"
      ],
      "sku_objects": [
        {
          "name": "BoardGameCo",
          "sku": "36533:22959"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149213652"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149104706"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=xViD75B4N1&product_line=Board Games&type=product",
      "players": "2",
      "playtime": "60",
      "price_text": "$184.99",
      "tags": [
        "Starship Catan",
        "Objectif Catane",
        "De ruimteschepen van Catan",
        "Sternenschiff Catan",
        "卡坦太空號"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257943503-615XH46133L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257943503-615XH46133L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257943503-615XH46133L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257943503-615XH46133L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257943503-615XH46133L.jpg"
      },
      "description_preview": "In a flash, two Starfarers from the Catan space fleet have been thrown through a mysterious wormhole into an unknown galaxy. Lost, dazed and unable to find their way home, and with limited resources, the brave explorers face a seemingly hopeless situation, until they meet four peaceful alien races. These friendly aliens offer them limited aid and will guide them home if they can meet the high standards required for entrance into the Galactic Advisory Council. Take the role of a Starfarer! Daringly brave the unknown reaches of space! Explore and colonize new worlds, strike vital trade agreements and perform missions of mercy, while improving and preparing your Starship for the journey home. If you work hard and choose your course carefully and vigorously, you will attain membership in the Council and learn the way home!Beware! Not every alien in the galaxy will look upon you with friendliness. Dastardly space pirates desire your wealth and influence. Their raids are merciless, and their strength is growing! Be careful as you speed through the unknown! Only a careful balance of colonization and trade, bravery and caution, will lead you and your crew home.Lost in the depths of space? Not a problem for a real Starfarer! Activate your boosters for an adventure of space discovery!"
    },
    {
      "id": "gnv8PYIV3A",
      "handle": "catan-dice-game",
      "url": "https://www.boardgameatlas.com/game/gnv8PYIV3A/catan-dice-game",
      "bga_edit_url": "https://www.boardgameatlas.com/game/gnv8PYIV3A/edit",
      "template_url": "/products/listing?objectId=gnv8PYIV3A&product_line=Board Games&type=product",
      "name": "Catan Dice Game",
      "price": "11.99",
      "price_ca": "15.95",
      "price_uk": "0.00",
      "price_au": "19.95",
      "msrp": 13,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 13
        }
      ],
      "discount": "0.08",
      "year_published": 2007,
      "min_players": 1,
      "max_players": 4,
      "player_counts": [
        1,
        2,
        3,
        4
      ],
      "min_playtime": 15,
      "max_playtime": 15,
      "min_age": 7,
      "description": "<p>Discover, explore, and settle Catan anywhere, anytime - even by yourself! In the <strong>Catan Dice Game</strong>, players build settlements, roads, cities, and knights like the popular <em>Catan</em> board game, but on a smaller scale with embossed dice and a scoring pad. Challenge the odds and discover a fresh way to master <em>Catan</em>!</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1545159442951",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1545159442951",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "UHdPUeuqyZ",
          "url": "https://www.boardgameatlas.com/mechanic/UHdPUeuqyZ/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        }
      ],
      "categories": [
        {
          "id": "mavSOM8vjH",
          "url": "https://www.boardgameatlas.com/category/mavSOM8vjH/undefined"
        }
      ],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UMssR9EGlp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/UMssR9EGlp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Michaela Kienle",
        "Harald Lieske",
        "Michael Menzel",
        "Klaus Teuber"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 55,
      "average_user_rating": 2.6727272727272733,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-09-29T04:08:21.249Z",
          "price": 19.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-12-10T23:50:31.841Z",
          "price": 10.33,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-01-01T01:28:29.103Z",
          "price": 15.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-02T17:19:54.783Z",
          "price": 11.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 2,
      "average_learning_complexity": 2.5,
      "average_strategy_complexity": 1.5,
      "visits": 427,
      "lists": 233,
      "mentions": 1,
      "links": 0,
      "plays": 297,
      "rank": 1337,
      "type": "game",
      "sku": "CNS3120",
      "upc": "029877031207",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CRDHS-64E4211D",
        "CN3120",
        "SWZ05",
        "SWL02",
        "CN3109",
        "002987703120701300",
        "029877031207",
        "85867",
        "21883",
        "2148650168",
        "MDGCA02222",
        "2148800781",
        "2148886839",
        "58842:62112",
        "BG-001650-001",
        "CATAN_DICE_SS",
        "CSICN3120",
        "MFG3120",
        "CN3120-FS",
        "MFG3108",
        "MFG3109",
        "2149377412"
      ],
      "sku_objects": [
        {
          "name": "Card Haus",
          "sku": "CRDHS-64E4211D"
        },
        {
          "name": "401 Games",
          "sku": "CN3120"
        },
        {
          "name": "Apt to Game",
          "sku": "SWZ05"
        },
        {
          "name": "Apt to Game",
          "sku": "SWL02"
        },
        {
          "name": "Apt to Game",
          "sku": "CN3109"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "002987703120701300"
        },
        {
          "name": "Arctic Board Game",
          "sku": "029877031207"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "85867"
        },
        {
          "name": "Hanabee",
          "sku": "21883"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148650168"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA02222"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148800781"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148886839"
        },
        {
          "name": "BoardGameCo",
          "sku": "58842:62112"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-001650-001"
        },
        {
          "name": "Gameology",
          "sku": "CATAN_DICE_SS"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3120"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3120"
        },
        {
          "name": "Boardlandia",
          "sku": "CN3120-FS"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3108"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3109"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149377412"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=gnv8PYIV3A&product_line=Board Games&type=product",
      "players": "1-4",
      "playtime": "15",
      "msrp_text": "$13.00",
      "price_text": "$11.99",
      "tags": [
        "Catan Dice Game",
        "Catan het dobbelspel",
        "Catan Telepesei: Kockajáték",
        "Catan: Das Würfelspiel",
        "I Coloni di Catan: Gioco di Dadi",
        "Los Colonos de Catán: El juego de dados",
        "De Kolonisten van Catan: Het Dobbelspel",
        "Naseljenci otoka Catan: Igra s kockami",
        "Osadníci z Katanu: Kostková hra",
        "Osadnicy z Catanu: Gra Kościana",
        "Die Siedler von Catan: Das Würfelspiel",
        "Οι Άποικοι του Κατάν: Με ζάρια",
        "Колонизаторы на кубиках",
        "Catan Dice Game Clamshell Edition",
        "Catan Dice Game Blister Pack",
        "CATAN The Dice Game",
        "Catan - Dice Game",
        "Catan The Dice Game",
        "Catan Dice",
        "Catan Dice Game Deluxe",
        "CATAN DICE GAME ENGLISH"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1545159442951",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1545159442951",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1545159442951",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1545159442951",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1545159442951"
      },
      "description_preview": " Discover, explore, and settle Catan anywhere, anytime - even by yourself! In the  Catan Dice Game , players build settlements, roads, cities, and knights like the popular  Catan  board game, but on a smaller scale with embossed dice and a scoring pad. Challenge the odds and discover a fresh way to master  Catan ! "
    },
    {
      "id": "KCCkl1g9GR",
      "handle": "catan-traders--barbarians-expansion-5th-edition",
      "url": "https://www.boardgameatlas.com/game/KCCkl1g9GR/catan-traders--barbarians-expansion-5th-edition",
      "bga_edit_url": "https://www.boardgameatlas.com/game/KCCkl1g9GR/edit",
      "template_url": "/products/listing?objectId=KCCkl1g9GR&product_line=Board Games&type=product",
      "name": "Catan: Traders & Barbarians",
      "price": "47.99",
      "price_ca": "41.49",
      "price_uk": "0.00",
      "price_au": "68.95",
      "msrp": 55,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.13",
      "year_published": 2007,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>In Catan: Traders &amp; Barbarians, you'll discover exciting, new ways to explore Klaus Teuber's award-winning game series. You can now play with just two players! Add a harbormaster, a friendly robber, or special events. Play with a wealth of new wooden pieces and capabilities. You can even link your games to create an intriguing campaign. Use these four variants and five scenarios to reinvent your Catan experience! Requires ownership of the Catan base game to play.</p>\r\n<p><br />This compilation includes 5 scenarios:</p>\r\n<p>    The Fishermen of Catan - Originally released in the 05/2006 Spielbox magazine and then subsequently released in Games Quarterly magazine. Expanded in this edition.<br />    The Rivers of Catan - Originally released in the Atlantis scenario box, then subsequently in Games Quarterly magazine as &quot;The Great River&quot;. Expanded in this edition to include two rivers, one occupying 4 tiles, and one occupying 3.<br />    The Great Caravan - Originally released as a free expansion in Germany.<br />    Barbarian Invasion - New in this edition. - Barbarians are invading Catan and the players have to try to stop them with new knight pieces. This plays very similarly to the flood mechanic in the Atlantis scenario from the Atlantis and Das Buch scenario packs.<br />    Traders &amp; Barbarians - New in this edition. - You get new hexes, one for the castle, one to produce glass, and one to produce marble. You try to rebuild Catan after the invasion. You get gold and victory points if you finish tasks in the castle, but to do so you have to travel back and forth to the castle on roads and undeveloped paths. There are still some barbarians around who interfere with trade routes.</p>\r\n<p>It also includes 4 minor variants:</p>\r\n<p>    2-Player Rules - Use the new &quot;Commercial Chips&quot; to force trade with your opponent. Use 3rd and 4th neutral player to block your opponent. Also available online: Klaus2player.pdf<br />    Catan Event Cards - Originally released in the Atlantis scenario box, then subsequently released for sale separately. Replaces the dice with a deck of cards to minimize randomness.<br />    The Harbormaster Card - Originally released in the Atlantis scenario box, then subsequently available online: harbormaster.pdf. Gives two victory points to the player with the most harbor points.<br />    Friendly Robber Rules</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540934790224",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540934790224",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "AZxlPpi5oq",
          "url": "https://www.boardgameatlas.com/mechanic/AZxlPpi5oq/undefined"
        },
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "U3zhCQH7Et",
          "url": "https://www.boardgameatlas.com/mechanic/U3zhCQH7Et/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        },
        {
          "id": "JYYdBW6UCE",
          "url": "https://www.boardgameatlas.com/mechanic/JYYdBW6UCE/undefined"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        },
        {
          "id": "CWYOF9xu7O",
          "url": "https://www.boardgameatlas.com/category/CWYOF9xu7O/undefined"
        }
      ],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "0bvxqCgoSm",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/0bvxqCgoSm/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "ja1W0hp62r",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ja1W0hp62r/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9XxoqlxAVw",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9XxoqlxAVw/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "sOdfXQmRBg",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/sOdfXQmRBg/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "QZq0yTzciC",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/QZq0yTzciC/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "UMssR9EGlp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/UMssR9EGlp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LeyRDCEgWD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LeyRDCEgWD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9DlitZqr9J",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9DlitZqr9J/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "J8pMyONAQy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/J8pMyONAQy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "32liHCLQDl",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/32liHCLQDl/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "3dt1SS9Uhm",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/3dt1SS9Uhm/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7BR21d98Nq",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7BR21d98Nq/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [
        "Volkan Baga",
        "Tanja Donner",
        "Harald Lieske",
        "Michael Menzel"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 38,
      "average_user_rating": 3.1750000000000003,
      "weight_amount": 0.95,
      "weight_units": "lbs",
      "size_height": 11.6,
      "size_depth": 3.12,
      "size_units": "inches",
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-05T00:56:12.460Z",
          "price": 67.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-02-22T00:41:49.746Z",
          "price": 35.78,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-06-10T02:29:09.981Z",
          "price": 41.49,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-12-26T03:17:42.929Z",
          "price": 47.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 1,
      "average_learning_complexity": 3,
      "average_strategy_complexity": 3,
      "visits": 656,
      "lists": 203,
      "mentions": 0,
      "links": 0,
      "plays": 39,
      "rank": 1389,
      "type": "expansion",
      "sku": "CNS3079",
      "upc": "029877030798",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3079",
        "ASMCN3079",
        "029877030798",
        "MDGCA00394",
        "81867",
        "MFG3079",
        "CN3071",
        "29877030798",
        "18084",
        "2148675445",
        "43937 #0405",
        "7143:175467",
        "BG-000234-001",
        "CNS3079",
        "CSICN3079",
        "FICAT05",
        "I052_CATAN_TRADE_M",
        "Warehouse|5d009833afb09eccaefd2858",
        "Ballarat|02dcd191-ae0b-11e8-ed44-8121802ce9ca",
        "MFG3067",
        "2148437139"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3079"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3079"
        },
        {
          "name": "401 Games",
          "sku": "029877030798"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA00394"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81867"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "MFG3079"
        },
        {
          "name": "gameknight.ca",
          "sku": "CN3071"
        },
        {
          "name": "Arctic Board Game",
          "sku": "29877030798"
        },
        {
          "name": "Hanabee",
          "sku": "18084"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148675445"
        },
        {
          "name": "Funagain Games",
          "sku": "43937 #0405"
        },
        {
          "name": "BoardGameCo",
          "sku": "7143:175467"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000234-001"
        },
        {
          "name": "Macronova Games",
          "sku": "CNS3079"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3079"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT05"
        },
        {
          "name": "Gameology",
          "sku": "I052_CATAN_TRADE_M"
        },
        {
          "name": "Guf",
          "sku": "Warehouse|5d009833afb09eccaefd2858"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae0b-11e8-ed44-8121802ce9ca"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3067"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148437139"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=KCCkl1g9GR&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "60-90",
      "msrp_text": "$55.00",
      "price_text": "$47.99",
      "tags": [
        "The Settlers of Catan: Traders & Barbarians",
        "Die Siedler von Catan: Händler & Barbaren",
        "Settlers of Catan: Traders & Barbarians",
        "Settlers fra Catan: Handelsmenn & Barbarer",
        "De Kolonisten van Catan: Kooplieden en Barbaren",
        "Los Colonos de Catan: Mercaderes y Bárbaros",
        "Catan: Händler & Barbaren",
        "Catan Traders and Barbarians Expansion",
        "Catan Traders Barbarians 2015 Refresh",
        "Catan Traders andand Barbarians Edition",
        "Catan Barbares et Marchands 5è Édition FR",
        "Catan: Traders & Barbarians",
        "Catan Traders Barbarians",
        "Catan: Barbares & Marchands (French Edition)",
        "Traders Barbarians",
        "Catan Traders Barbarians 2015",
        "Catan - Traders & Barbarians",
        "CATAN TRADERS BARBARIANS",
        "Traders Barbarians Expansion 5th Edition",
        "Catan Traders Barbarians 5th Edition",
        "Catan Traders Barbarians Expansion",
        "Catan Traders Barbarians Expansion 5th Ed",
        "Catan Expansion Traders Barbarians",
        "Catan Traders 38 Barbarians",
        "Catan Traders & Barbarians Game Expansion"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1540934790224",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1540934790224",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1540934790224",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1540934790224",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540934790224"
      },
      "description_preview": " In Catan: Traders & Barbarians, you'll discover exciting, new ways to explore Klaus Teuber's award-winning game series. You can now play with just two players! Add a harbormaster, a friendly robber, or special events. Play with a wealth of new wooden pieces and capabilities. You can even link your games to create an intriguing campaign. Use these four variants and five scenarios to reinvent your Catan experience! Requires ownership of the Catan base game to play. \r\n  This compilation includes 5 scenarios: \r\n     The Fishermen of Catan - Originally released in the 05/2006 Spielbox magazine and then subsequently released in Games Quarterly magazine. Expanded in this edition.     The Rivers of Catan - Originally released in the Atlantis scenario box, then subsequently in Games Quarterly magazine as \"The Great River\". Expanded in this edition to include two rivers, one occupying 4 tiles, and one occupying 3.     The Great Caravan - Originally released as a free expansion in Germany.     Barbarian Invasion - New in this edition. - Barbarians are invading Catan and the players have to try to stop them with new knight pieces. This plays very similarly to the flood mechanic in the Atlantis scenario from the Atlantis and Das Buch scenario packs.     Traders & Barbarians - New in this edition. - You get new hexes, one for the castle, one to produce glass, and one to produce marble. You try to rebuild Catan after the invasion. You get gold and victory points if you finish tasks in the castle, but to do so you have to travel back and forth to the castle on roads and undeveloped paths. There are still some barbarians around who interfere with trade routes. \r\n It also includes 4 minor variants: \r\n     2-Player Rules - Use the new \"Commercial Chips\" to force trade with your opponent. Use 3rd and 4th neutral player to block your opponent. Also available online: Klaus2player.pdf     Catan Event Cards - Originally released in the Atlantis scenario box, then subsequently released for sale separately. Replaces the dice with a deck of cards to minimize randomness.     The Harbormaster Card - Originally released in the Atlantis scenario box, then subsequently available online: harbormaster.pdf. Gives two victory points to the player with the most harbor points.     Friendly Robber Rules "
    },
    {
      "id": "77kv4LxMcX",
      "handle": "settlers-of-the-stone-age",
      "url": "https://www.boardgameatlas.com/game/77kv4LxMcX/settlers-of-the-stone-age",
      "bga_edit_url": "https://www.boardgameatlas.com/game/77kv4LxMcX/edit",
      "template_url": "/products/listing?objectId=77kv4LxMcX&product_line=Board Games&type=product",
      "name": "Catan Histories: The Settlers of the Stone Age",
      "price": "47.95",
      "price_ca": "69.95",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 49,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 49
        }
      ],
      "discount": "0.00",
      "year_published": 2002,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 90,
      "max_playtime": 90,
      "min_age": 10,
      "description": "<p>Come join in the adventure that is the dawn of Humankind. Will your tribe journey far and fast? Will they surmount the pain dangers of this world? Will they bring you victory and survival?</p>\r\n<p>Based on the award-winning Settlers of Catan game system, but presenting players with all-new challenges unique to the dangers and opportunities of the Stone Age.</p>\r\n<p>The cradle of modern humans, called Homo sapiens... by scientists, was located Africa more than 100,000 years ago. The first branches of this family began a journey that spanned thousands of years, eventually leading them to Australia and America. The enormous difficulties of this journey could only be overcome because of Homo sapiens... unique ability to adapt to its environment. Their highly developed brains and their mastery of crafts enabled them master even the harshest conditions.</p>\r\n<p>In this exciting game, you will guide the journey of one of these branches. You must struggle to spread your people over the whole world. In order to expand your branch humanity you must develop certain talents: advances in the preparation of food will allow your people to spread faster and wider, while new hunting techniques can protect them from dangers. And your people will need warm clothes to cross the ice deserts of the north and boats to settle in Australia.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Tanja Donner",
        "Franz Vohwinkel"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 347592,
      "official_url": "http://www.mayfairgames.com/products/abenteuer-menschheit?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 27,
      "average_user_rating": 3.166666666666667,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2022-02-08T09:03:43.159Z",
          "price": 69.95,
          "isLow": true
        },
        {
          "country": "US",
          "date": "2022-12-08T15:28:25.373Z",
          "price": 47.95,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 404,
      "lists": 79,
      "mentions": 0,
      "links": 0,
      "plays": 28,
      "rank": 1642,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "2149258841",
        "39952:35519",
        "CN3201",
        "CRDHS-65923768",
        "MFG3201"
      ],
      "sku_objects": [
        {
          "name": "Noble Knight Games",
          "sku": "2149258841"
        },
        {
          "name": "BoardGameCo",
          "sku": "39952:35519"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "CN3201"
        },
        {
          "name": "Card Haus",
          "sku": "CRDHS-65923768"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3201"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=77kv4LxMcX&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "90",
      "msrp_text": "$49.00",
      "price_text": "$47.95",
      "tags": [
        "The Settlers of the Stone Age",
        "Abenteuer Menschheit",
        "De Kolonisten van de Prehistorie",
        "Каменный век",
        "アドベンチャー人類",
        "Settlers of the Stone Age The",
        "CATAN HISTORIES THE SETTLERS OF THE STONE AGE"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257210680-61QHmN9HC0L.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257210680-61QHmN9HC0L.jpg"
      },
      "description_preview": " Come join in the adventure that is the dawn of Humankind. Will your tribe journey far and fast? Will they surmount the pain dangers of this world? Will they bring you victory and survival? \r\n Based on the award-winning Settlers of Catan game system, but presenting players with all-new challenges unique to the dangers and opportunities of the Stone Age. \r\n The cradle of modern humans, called Homo sapiens... by scientists, was located Africa more than 100,000 years ago. The first branches of this family began a journey that spanned thousands of years, eventually leading them to Australia and America. The enormous difficulties of this journey could only be overcome because of Homo sapiens... unique ability to adapt to its environment. Their highly developed brains and their mastery of crafts enabled them master even the harshest conditions. \r\n In this exciting game, you will guide the journey of one of these branches. You must struggle to spread your people over the whole world. In order to expand your branch humanity you must develop certain talents: advances in the preparation of food will allow your people to spread faster and wider, while new hunting techniques can protect them from dangers. And your people will need warm clothes to cross the ice deserts of the north and boats to settle in Australia. "
    },
    {
      "id": "6ZfddWsNPT",
      "handle": "catan-histories-settlers-of-america-trails-to-rails",
      "url": "https://www.boardgameatlas.com/game/6ZfddWsNPT/catan-histories-settlers-of-america-trails-to-rails",
      "bga_edit_url": "https://www.boardgameatlas.com/game/6ZfddWsNPT/edit",
      "template_url": "/products/listing?objectId=6ZfddWsNPT&product_line=Board Games&type=product",
      "name": "Catan Histories: Settlers of America Trails to Rails",
      "price": "55.99",
      "price_ca": "80.95",
      "price_uk": "0.00",
      "price_au": "99.99",
      "msrp": 65,
      "msrps": [
        {
          "country": "US",
          "price": 65
        }
      ],
      "discount": "0.14",
      "year_published": 2010,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 120,
      "max_playtime": 120,
      "min_age": 12,
      "description": "<p>The 19th Century has arrived and America is heading west. Wagon trains form on the frontier. Settlers seeking fresh lives and opportunities strike out to tame wild lands and build new cities. These new cities rely on young railroads for vital goods. Trails become rails and create great wealth. While the crowded East still offers options, its resources dwindle. Look west to make your fortune. Smart money seeks rich, unclaimed land and hungry new markets. Finance your settlers as they head west to build capitals of tomorrow. Link these cities with rails of steel. Operate your railroad to supply the townsfolk with goods. Go west. Settle the wide, open land. Claim your destiny. Settlers of America, Trails to Rails utilizes the simple, fun Catan hex-tile grid to map the young United States. Collect and trade resources in order to purchase and move settlers, build cities, lay rails and acquire and move trains. Create rail links to acquire gold, which lets you buy resources and use opponents' rails. Use trains to distribute goods to rival cities. But, as your settlers populate the West, they deplete the resources of the East. Still, your options always abound.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [
        {
          "id": "329DxyFL9D",
          "url": "https://www.boardgameatlas.com/category/329DxyFL9D/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        },
        {
          "id": "JwHcKqxh33",
          "url": "https://www.boardgameatlas.com/category/JwHcKqxh33/undefined"
        }
      ],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "David Cochard",
        "Pete Fenlon",
        "Harald Lieske",
        "Mark Zug"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 215950,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 33,
      "average_user_rating": 3.1742424242424243,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-10-03T09:20:54.756Z",
          "price": 49.99,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2021-12-01T01:14:01.218Z",
          "price": 89.34,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2021-12-06T02:57:50.129Z",
          "price": 89.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-12-22T04:46:39.829Z",
          "price": 55.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 675,
      "lists": 77,
      "mentions": 4,
      "links": 0,
      "plays": 64,
      "rank": 1647,
      "type": "game",
      "sku": "CNS3203",
      "upc": "029877032037",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3203-DD",
        "ASMCN3203",
        "CN3203",
        "0298877032037",
        "21888",
        "029877032037",
        "2148930650",
        "34145:41144",
        "43928 #0",
        "CSICN3203",
        "MFG3203",
        "2149229296"
      ],
      "sku_objects": [
        {
          "name": "Boardlandia",
          "sku": "CN3203-DD"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3203"
        },
        {
          "name": "Dragon’s Den Games",
          "sku": "CN3203"
        },
        {
          "name": "Arctic Board Game",
          "sku": "0298877032037"
        },
        {
          "name": "Hanabee",
          "sku": "21888"
        },
        {
          "name": "Boardgame Master",
          "sku": "029877032037"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148930650"
        },
        {
          "name": "BoardGameCo",
          "sku": "34145:41144"
        },
        {
          "name": "Funagain Games",
          "sku": "43928 #0"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3203"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3203"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149229296"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=6ZfddWsNPT&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "120",
      "msrp_text": "$65.00",
      "price_text": "$55.99",
      "tags": [
        "Catan Histories: Settlers of America Board Game",
        "Catan Histories: Settlers of America",
        "Settlers of America Trails to Rails Edition",
        "Catan Historias: Los Colonos de América",
        "Catan Histories: I Coloni d'America",
        "De Kolonisten van Amerika",
        "Колонизаторы. Америка",
        "Catan Histories: Settlers of America – Trails to Rails",
        "Settlers of America Trails to Rails board game",
        "Settlers of America Trails to Rails",
        "CATAN HISTORIES Settlers of America Trails to Rails",
        "Catan Histories Settlers of America Trails to Rails",
        "Catan Histories Settlers of America Trails to Rail",
        "Catan Histories Settlers Of America Trails To Rails",
        "Settlers of America Trails to Rails 1st Edition",
        "Settlers of America Trails to Rails 2nd Edition",
        "Settlers of America",
        "Mayfair Games Catan Histories Settlers of America Trails to Rails Board Game"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257253081-61zg5-7yZzL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257253081-61zg5-7yZzL.jpg"
      },
      "description_preview": " The 19th Century has arrived and America is heading west. Wagon trains form on the frontier. Settlers seeking fresh lives and opportunities strike out to tame wild lands and build new cities. These new cities rely on young railroads for vital goods. Trails become rails and create great wealth. While the crowded East still offers options, its resources dwindle. Look west to make your fortune. Smart money seeks rich, unclaimed land and hungry new markets. Finance your settlers as they head west to build capitals of tomorrow. Link these cities with rails of steel. Operate your railroad to supply the townsfolk with goods. Go west. Settle the wide, open land. Claim your destiny. Settlers of America, Trails to Rails utilizes the simple, fun Catan hex-tile grid to map the young United States. Collect and trade resources in order to purchase and move settlers, build cities, lay rails and acquire and move trains. Create rail links to acquire gold, which lets you buy resources and use opponents' rails. Use trains to distribute goods to rival cities. But, as your settlers populate the West, they deplete the resources of the East. Still, your options always abound. "
    },
    {
      "id": "U3JxcogfCc",
      "handle": "catan-starfarers",
      "url": "https://www.boardgameatlas.com/game/U3JxcogfCc/catan-starfarers",
      "bga_edit_url": "https://www.boardgameatlas.com/game/U3JxcogfCc/edit",
      "template_url": "/products/listing?objectId=U3JxcogfCc&product_line=Board Games&type=product",
      "name": "Catan: Starfarers",
      "price": "73.50",
      "price_ca": "110.99",
      "price_uk": "0.00",
      "price_au": "133.95",
      "msrp": 99,
      "msrps": [
        {
          "country": "US",
          "price": 99
        },
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "AU",
          "price": 0
        }
      ],
      "discount": "0.26",
      "year_published": 2019,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 120,
      "max_playtime": 120,
      "min_age": 14,
      "description": "<p>Finally, a jump to the stars has succeeded!</p>\r\n<p>It is the middle of the 3rd millennium. You and your fellow Catanians travel in spaceships to distant planetary systems in search of more resources. Along the way, you befriend alien civilizations who might become valued trading partners.</p>\r\n<p>Increase your resource production to build new transport ships and spaceports. Equip yourself against the lurking danger of space pirates. Many exciting encounters await you!</p>\r\n<p>This completely revised reissue of the classic <em>The Starfarers of Catan™</em> contains atmospheric illustrations, refined rules, redesigned game components, and an exciting variable game board.</p>\r\n<p><em>Description from Publishers website</em></p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1597348003360",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1597348003360",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "yu3eas6v7A",
          "url": "https://www.boardgameatlas.com/mechanic/yu3eas6v7A/undefined"
        },
        {
          "id": "jMwUJLemr6",
          "url": "https://www.boardgameatlas.com/mechanic/jMwUJLemr6/undefined"
        },
        {
          "id": "rpPPpJPbeZ",
          "url": "https://www.boardgameatlas.com/mechanic/rpPPpJPbeZ/undefined"
        },
        {
          "id": "Rt6V388y6M",
          "url": "https://www.boardgameatlas.com/mechanic/Rt6V388y6M/undefined"
        },
        {
          "id": "lA3KUtVFCy",
          "url": "https://www.boardgameatlas.com/mechanic/lA3KUtVFCy/undefined"
        },
        {
          "id": "GUoWg3Mfh5",
          "url": "https://www.boardgameatlas.com/mechanic/GUoWg3Mfh5/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Michaela Kienle",
        "Franz Vohwinkel"
      ],
      "names": [],
      "rules_url": null,
      "official_url": "https://catanshop.com/catan-starfarers?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 14,
      "average_user_rating": 3.895714285714286,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2022-03-18T07:07:51.069Z",
          "price": 79.51,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2023-01-20T15:47:05.704Z",
          "price": 110.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-28T11:52:06.251Z",
          "price": 73.5,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2023-02-07T04:51:22.221Z",
          "price": 133.95,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 2,
      "average_learning_complexity": 2,
      "average_strategy_complexity": 3,
      "visits": 1375,
      "lists": 143,
      "mentions": 3,
      "links": 0,
      "plays": 32,
      "rank": 9999999,
      "type": "game",
      "upc": "029877030057",
      "num_distributors": 1,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3005",
        "CN3005-DD",
        "CSICN3005",
        "029877030071",
        "0029877030071",
        "029877030057",
        "97827",
        "CST01",
        "ASMCN3005",
        "69782",
        "BG-000878-001",
        "CATAN_STARFARERS_M",
        "CN3007",
        "KOSCAVGA01FR",
        "Ballarat|02dcd191-ae3f-11e9-f336-96450f4f09b8",
        "2149104444"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3005"
        },
        {
          "name": "Boardlandia",
          "sku": "CN3005-DD"
        },
        {
          "name": "Card Haus",
          "sku": "CSICN3005"
        },
        {
          "name": "LVLUP GAMES",
          "sku": "029877030071"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0029877030071"
        },
        {
          "name": "Arctic Board Game",
          "sku": "029877030057"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "97827"
        },
        {
          "name": "Advent Games",
          "sku": "CST01"
        },
        {
          "name": "Gumnut",
          "sku": "ASMCN3005"
        },
        {
          "name": "Hanabee",
          "sku": "69782"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000878-001"
        },
        {
          "name": "Gameology",
          "sku": "CATAN_STARFARERS_M"
        },
        {
          "name": "Miniature Market",
          "sku": "CN3007"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "KOSCAVGA01FR"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae3f-11e9-f336-96450f4f09b8"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149104444"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=U3JxcogfCc&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "120",
      "msrp_text": "$99.00",
      "price_text": "$73.50",
      "tags": [
        "Catan Starfarers",
        "Catan: Starfarers",
        "Catan: Starfarers - 2nd Edition",
        "Catan Starfarers board game",
        "Catan: Voyageurs Galactiques (French Edition)",
        "CATAN STARFARERS",
        "Catan Starfarers 2nd Edition",
        "Catan Starfarers 2nd Edition Game",
        "CATAN STARFARERS ENGLISH",
        "Starfarers 2nd Edition",
        "Catan: Starfarer",
        "Catan: Starfarers 2nd Edition",
        "CATAN - STARFARERS",
        "Catan: Starfarers - 2nd Edition (Stand Alone) - Dent and Ding"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1597348003360",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1597348003360",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1597348003360",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1597348003360",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1597348003360"
      },
      "description_preview": " Finally, a jump to the stars has succeeded! \r\n It is the middle of the 3rd millennium. You and your fellow Catanians travel in spaceships to distant planetary systems in search of more resources. Along the way, you befriend alien civilizations who might become valued trading partners. \r\n Increase your resource production to build new transport ships and spaceports. Equip yourself against the lurking danger of space pirates. Many exciting encounters await you! \r\n This completely revised reissue of the classic  The Starfarers of Catan™  contains atmospheric illustrations, refined rules, redesigned game components, and an exciting variable game board. \r\n  Description from Publishers website  "
    },
    {
      "id": "RCDJAQKpLn",
      "handle": "catan-3d-edition",
      "url": "https://www.boardgameatlas.com/game/RCDJAQKpLn/catan-3d-edition",
      "bga_edit_url": "https://www.boardgameatlas.com/game/RCDJAQKpLn/edit",
      "template_url": "/products/listing?objectId=RCDJAQKpLn&product_line=Board Games&type=product",
      "name": "Catan: 3D Edition",
      "price": "232.80",
      "price_ca": "284.95",
      "price_uk": "199.99",
      "price_au": "373.95",
      "msrp": 300,
      "msrps": [
        {
          "country": "US",
          "price": 300
        }
      ],
      "discount": "0.22",
      "year_published": 2021,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 120,
      "min_age": 10,
      "description": "<p>The island of CATAN rises off the table for an immersive experience like no other. Your settlements grow up from fertile grain fields and your cities nestle into the sides of majestic mountains.<br /><br />CATAN comes alive as you collect resources, trade them with your fellow Catanians, and build your way to victory! But beware the robber who waits in the wings to cut off your resource supply.<br /><br />This long-awaited CATAN® 3D Edition is based on terrain tiles hand-sculpted by Klaus Teuber himself.<br /><br />All of the terrain is hand-painted for stunning color. The intricately designed player pieces are antiqued for a look that's full of history and character.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821",
      "image_url": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "U3zhCQH7Et",
          "url": "https://www.boardgameatlas.com/mechanic/U3zhCQH7Et/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "rpPPpJPbeZ",
          "url": "https://www.boardgameatlas.com/mechanic/rpPPpJPbeZ/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        },
        {
          "id": "qdOpNsR6iU",
          "url": "https://www.boardgameatlas.com/mechanic/qdOpNsR6iU/undefined"
        }
      ],
      "categories": [
        {
          "id": "N0TkEGfEsF",
          "url": "https://www.boardgameatlas.com/category/N0TkEGfEsF/undefined"
        },
        {
          "id": "jZEDOpx07e",
          "url": "https://www.boardgameatlas.com/category/jZEDOpx07e/undefined"
        }
      ],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {},
      "primary_designer": {},
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Michael Menzel",
        ""
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 0,
      "average_user_rating": 0,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2022-01-07T16:31:57.425Z",
          "price": 299.95,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2022-02-13T07:51:25.754Z",
          "price": 239.95,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2022-02-19T08:22:20.050Z",
          "price": 238.55,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-18T00:45:03.535Z",
          "price": 232.8,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 1040,
      "lists": 23,
      "mentions": 0,
      "links": 0,
      "plays": 5,
      "rank": 9999999,
      "type": "game",
      "upc": "029877031719",
      "num_distributors": 2,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3171",
        "ASMCN3171",
        "029877031719",
        "BG-001700-001",
        "0029877031719",
        "102111",
        "Ballarat|0a91b764-1c3f-11eb-e0eb-d9595c2cad29",
        "2149147893",
        "30029877031710",
        "48140 #0012",
        "CSICN3171"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3171"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3171"
        },
        {
          "name": "401 Games",
          "sku": "029877031719"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-001700-001"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0029877031719"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "102111"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|0a91b764-1c3f-11eb-e0eb-d9595c2cad29"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149147893"
        },
        {
          "name": "Board Game Supply",
          "sku": "30029877031710"
        },
        {
          "name": "Funagain Games",
          "sku": "48140 #0012"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3171"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=RCDJAQKpLn&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "60-120",
      "msrp_text": "$300.00",
      "price_text": "$232.80",
      "tags": [
        "CATAN: 3D Edition",
        "Catan 3D Special Edition",
        "(Pre Order) Catan 3D Edition",
        "CATAN: 3D Edition *PRE-ORDER*",
        "Catan 3D Edition",
        "Catan 3D",
        "CATAN 3D Edition",
        "CATAN 3D EDITION",
        "Catan: 3D Edition",
        "Catan 3D Edition Pre Order",
        "CATAN 3D EDITION ENGLISH"
      ],
      "images": {
        "thumb": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821",
        "small": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821",
        "medium": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821",
        "large": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821",
        "original": "https://cdn.shopify.com/s/files/1/0274/9631/products/CN3171_01-Z.jpg?v=1629444821"
      },
      "description_preview": " The island of CATAN rises off the table for an immersive experience like no other. Your settlements grow up from fertile grain fields and your cities nestle into the sides of majestic mountains.  CATAN comes alive as you collect resources, trade them with your fellow Catanians, and build your way to victory! But beware the robber who waits in the wings to cut off your resource supply.  This long-awaited CATAN® 3D Edition is based on terrain tiles hand-sculpted by Klaus Teuber himself.  All of the terrain is hand-painted for stunning color. The intricately designed player pieces are antiqued for a look that's full of history and character. "
    },
    {
      "id": "mkHvQOfOWJ",
      "handle": "catan-25th-anniversary-edition",
      "url": "https://www.boardgameatlas.com/game/mkHvQOfOWJ/catan-25th-anniversary-edition",
      "bga_edit_url": "https://www.boardgameatlas.com/game/mkHvQOfOWJ/edit",
      "template_url": "/products/listing?objectId=mkHvQOfOWJ&product_line=Board Games&type=product",
      "name": "Catan: 25th Anniversary Edition",
      "price": "80.99",
      "price_ca": "84.99",
      "price_uk": "0.00",
      "price_au": "114.99",
      "msrp": 80,
      "msrps": [
        {
          "country": "US",
          "price": 80
        },
        {
          "country": "UK",
          "price": 79.99
        }
      ],
      "discount": "-0.01",
      "year_published": 2020,
      "min_players": 3,
      "max_players": 6,
      "player_counts": [
        3,
        4,
        5,
        6
      ],
      "min_playtime": 60,
      "max_playtime": 120,
      "min_age": 10,
      "description": "<p>The <strong>Catan 25th Anniversary Edition</strong> contains the classic Catan 3-4 player board game, plus 5-6 Player Extension, Helpers of Catan Scenario, special iridescent anniversary wood pieces and dice. Also includes resource card sorting trays and card sleeves.</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629997850931",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629997850931",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "eJue6JPxqV",
        "name": "Catan Studio",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Michael Menzel"
      ],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 1,
      "average_user_rating": 3.5,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2022-01-01T21:10:19.135Z",
          "price": 114.51,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-11T23:36:24.024Z",
          "price": 79.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2022-03-18T20:21:53.674Z",
          "price": 63.61,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-12-06T02:30:28.888Z",
          "price": 80.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 886,
      "lists": 28,
      "mentions": 0,
      "links": 0,
      "plays": 5,
      "rank": 9999999,
      "type": "game",
      "sku": "CNS3222",
      "upc": "029877032228",
      "num_distributors": 3,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3222",
        "ASMCN3222",
        "029877032228",
        "8429551720342",
        "99832",
        "catan-25-anniversary-edition",
        "47071 #0",
        "BG-000894-001",
        "CATAN_25TH_ANNIV",
        "CSICN3222",
        "MDGCA01887",
        "CN3222-DD"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3222"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3222"
        },
        {
          "name": "401 Games",
          "sku": "029877032228"
        },
        {
          "name": "LVLUP GAMES",
          "sku": "8429551720342"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "99832"
        },
        {
          "name": "Rollers",
          "sku": "catan-25-anniversary-edition"
        },
        {
          "name": "Funagain Games",
          "sku": "47071 #0"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000894-001"
        },
        {
          "name": "Gameology",
          "sku": "CATAN_25TH_ANNIV"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3222"
        },
        {
          "name": "Mr. Dice Guy",
          "sku": "MDGCA01887"
        },
        {
          "name": "Boardlandia",
          "sku": "CN3222-DD"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=mkHvQOfOWJ&product_line=Board Games&type=product",
      "players": "3-6",
      "playtime": "60-120",
      "msrp_text": "$80.00",
      "price_text": "$80.99",
      "tags": [
        "Catan: 25th Anniversary Edition",
        "Catan 25th Anniversary Edition"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1629997850931",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1629997850931",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1629997850931",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1629997850931",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629997850931"
      },
      "description_preview": " The  Catan 25th Anniversary Edition  contains the classic Catan 3-4 player board game, plus 5-6 Player Extension, Helpers of Catan Scenario, special iridescent anniversary wood pieces and dice. Also includes resource card sorting trays and card sleeves. "
    },
    {
      "id": "qiJzLWCvPB",
      "handle": "catan-explorers-and-pirates-expansion",
      "url": "https://www.boardgameatlas.com/game/qiJzLWCvPB/catan-explorers-and-pirates-expansion",
      "bga_edit_url": "https://www.boardgameatlas.com/game/qiJzLWCvPB/edit",
      "template_url": "/products/listing?objectId=qiJzLWCvPB&product_line=Board Games&type=product",
      "name": "Catan: Explorers & Pirates",
      "price": "47.99",
      "price_ca": "45.99",
      "price_uk": "22.50",
      "price_au": "76.95",
      "msrp": 55,
      "msrps": [
        {
          "country": "CA",
          "price": 0
        },
        {
          "country": "UK",
          "price": 0
        },
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.13",
      "year_published": 2013,
      "min_players": 2,
      "max_players": 4,
      "player_counts": [
        2,
        3,
        4
      ],
      "min_playtime": 90,
      "max_playtime": 120,
      "min_age": 12,
      "description": "<p><strong>Catan: Explorers &amp; Pirates</strong> includes 5 novel scenarios, each of which builds upon your previous experience. All are easy to learn, rich in character, and lots of fun. In each, you explore an unknown sea by ship and build settlements on the discovered islands.<br /><br />Scenario 1 (“Land Ho!”) introduces you to valuable harbor settlements, shipbuilding, exploration, and overseas settlement—the most important basic rules of this expansion. Each subsequent scenario introduces a new mission and its simple new rules. The game culminates in Scenario 5 (“Explorers &amp; Pirates”), which incorporates all of these very rich new themes in a diverse and exciting campaign of bold exploration and piracy!<br /><br />Explore Catan! Build harbor settlements, ships, settlers, and sailing crews and set out across mysterious seas in search of new lands, spices, fish, and gold fields.<br /><br />Components<br />16 harbor settlements (wood)<br />32 adventurers (wood)<br />12 ships (wood)<br />8 settlers (wood)<br />12 markers (wood double cubes)<br />4 pirate ships (wood)<br />6 fish(wood)<br />24 spice sacks (wood cubes)<br />76 gold coins (die cut)<br />12 frame pieces<br />6 gold field hexes<br />6 fish shoal hexes<br />6 spice hexes<br />6 terrain hexes and 6 number tokens (green backs)<br />6 terrain hexes and 6 number tokens (orange backs)<br />6 pirate lair tokens<br />3 mission cards<br />3 mission victory point cards<br />4 building cost cards</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257884176-513ASwyUbTL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257884176-513ASwyUbTL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "jMwUJLemr6",
          "url": "https://www.boardgameatlas.com/mechanic/jMwUJLemr6/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "Rt6V388y6M",
          "url": "https://www.boardgameatlas.com/mechanic/Rt6V388y6M/undefined"
        }
      ],
      "categories": [
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        }
      ],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "r2R8bUHIRD",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/r2R8bUHIRD/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9GlpSO4zcy",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9GlpSO4zcy/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "SXnhc3S9lv",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/SXnhc3S9lv/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "vJkLBDgn1j",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/vJkLBDgn1j/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "ja1W0hp62r",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/ja1W0hp62r/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "9XxoqlxAVw",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/9XxoqlxAVw/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1TaoBxZ3GH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1TaoBxZ3GH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "LhiwjGd2o7",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/LhiwjGd2o7/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "32liHCLQDl",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/32liHCLQDl/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [
        "expansion"
      ],
      "artists": [],
      "names": [],
      "rules_url": null,
      "amazon_rank": 8252,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 14,
      "average_user_rating": 3.5714285714285716,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-10-01T00:55:06.280Z",
          "price": 79.95,
          "isLow": true
        },
        {
          "country": "UK",
          "date": "2022-07-20T16:20:50.424Z",
          "price": 22.5,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-10-21T06:11:41.201Z",
          "price": 45.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2023-01-22T10:14:33.292Z",
          "price": 47.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 798,
      "lists": 165,
      "mentions": 0,
      "links": 0,
      "plays": 18,
      "rank": 9999999,
      "type": "expansion",
      "sku": "CNS3075",
      "upc": "029877030750",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3075",
        "2149265467",
        "2149273046",
        "2148789935",
        "ASMCN3075DD",
        "ASMCN3075",
        "MFG3075",
        "81868",
        "02987703069905000",
        "029877030750",
        "66537649",
        "27134",
        "2148559258",
        "29877030750",
        "43932 #0345",
        "7134:11097",
        "BG-000205-001",
        "CNS3075",
        "CSICN3075",
        "D0444_CATAN_EXPLO_CORE_M",
        "FICAT06",
        "KOS-FICAT10",
        "KOS-COK14N",
        "200121224",
        "100306",
        "CN3075-1",
        "MFG3069",
        "0688623905829"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3075"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149265467"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149273046"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148789935"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3075DD"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3075"
        },
        {
          "name": "Advent Games",
          "sku": "MFG3075"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "81868"
        },
        {
          "name": "Cardboard Memories Inc.",
          "sku": "02987703069905000"
        },
        {
          "name": "LVLUP GAMES",
          "sku": "029877030750"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "66537649"
        },
        {
          "name": "Hanabee",
          "sku": "27134"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148559258"
        },
        {
          "name": "Board Game Supply",
          "sku": "29877030750"
        },
        {
          "name": "Funagain Games",
          "sku": "43932 #0345"
        },
        {
          "name": "BoardGameCo",
          "sku": "7134:11097"
        },
        {
          "name": "Meeples and Milkshakes",
          "sku": "BG-000205-001"
        },
        {
          "name": "Macronova Games",
          "sku": "CNS3075"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3075"
        },
        {
          "name": "Gameology",
          "sku": "D0444_CATAN_EXPLO_CORE_M"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "FICAT06"
        },
        {
          "name": "Philibert",
          "sku": "KOS-FICAT10"
        },
        {
          "name": "Philibert",
          "sku": "KOS-COK14N"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "200121224"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "100306"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "CN3075-1"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3069"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0688623905829"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=qiJzLWCvPB&product_line=Board Games&type=product",
      "players": "2-4",
      "playtime": "90-120",
      "msrp_text": "$55.00",
      "price_text": "$47.99",
      "tags": [
        "Catan Piratas y Exploradores",
        "Catan: Äventyrare & Pirater",
        "Catan: Entdecker & Piraten",
        "De kolonisten van Catan: Piraten & Ontdekkers",
        "Settlers fra Catan: Eventyrere & Pirater",
        "Die Siedler von Catan: Entdecker & Piraten",
        "Колонизаторы: Первопроходцы и пираты",
        "カタンの開拓者たち 探検者と海賊版",
        "Osadnicy z Catanu: Odkrywcy i Piraci",
        "Osadníci z Katanu: Zámořské objevy",
        "Colonistii din Catan: Pirati si exploratori",
        "I Coloni di Catan: Esploratori e Corsari",
        "Catane: Pirates & Découvreurs",
        "Catan: Raziskovalci in Gusjari",
        "CATAN: Pirates & Découvreurs",
        "Catan: Piraten & Ontdekkers",
        "Catan: Istraživači i Gusari",
        "Catan: Felfedezők és kalózok",
        "Catan: Odkrywcy i Piraci",
        "Catan Explorers and Pirates Expansion",
        "Catan Explorers Pirates Expansion 2015 Refresh",
        "Catan 2015 Refresh Explorers Pirates Expansion",
        "Catan Explorers Pirates 2015 Refresh",
        "Mayfair Games Catan: Explorers & Pirates Expansion 4th Edition",
        "Catan: Explorers & Pirates",
        "Settlers of Catan Edition Explorers Pirates Expansion",
        "Catan Explorers Pirates",
        "Catan: Pirates & Découvreurs (French Edition)",
        "Catan Explorers Pirates 2015",
        "Catan Explorers Pirates Expansion",
        "CATAN EXPLORERS PIRATES",
        "Catan: Explorers & Pirates (Second Edition) (Minor Damage)",
        "Catan: Explorers & Pirates (Dinged/Dented - 20% off at checkout)"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257884176-513ASwyUbTL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257884176-513ASwyUbTL.jpg"
      },
      "description_preview": "  Catan: Explorers & Pirates  includes 5 novel scenarios, each of which builds upon your previous experience. All are easy to learn, rich in character, and lots of fun. In each, you explore an unknown sea by ship and build settlements on the discovered islands.  Scenario 1 (“Land Ho!”) introduces you to valuable harbor settlements, shipbuilding, exploration, and overseas settlement—the most important basic rules of this expansion. Each subsequent scenario introduces a new mission and its simple new rules. The game culminates in Scenario 5 (“Explorers & Pirates”), which incorporates all of these very rich new themes in a diverse and exciting campaign of bold exploration and piracy!  Explore Catan! Build harbor settlements, ships, settlers, and sailing crews and set out across mysterious seas in search of new lands, spices, fish, and gold fields.  Components 16 harbor settlements (wood) 32 adventurers (wood) 12 ships (wood) 8 settlers (wood) 12 markers (wood double cubes) 4 pirate ships (wood) 6 fish(wood) 24 spice sacks (wood cubes) 76 gold coins (die cut) 12 frame pieces 6 gold field hexes 6 fish shoal hexes 6 spice hexes 6 terrain hexes and 6 number tokens (green backs) 6 terrain hexes and 6 number tokens (orange backs) 6 pirate lair tokens 3 mission cards 3 mission victory point cards 4 building cost cards "
    },
    {
      "id": "fz1hSbgUN2",
      "handle": "a-game-of-thrones-catan-brotherhood-of-the-watch",
      "url": "https://www.boardgameatlas.com/game/fz1hSbgUN2/a-game-of-thrones-catan-brotherhood-of-the-watch",
      "bga_edit_url": "https://www.boardgameatlas.com/game/fz1hSbgUN2/edit",
      "template_url": "/products/listing?objectId=fz1hSbgUN2&product_line=Board Games&type=product",
      "name": "A Game of Thrones Catan: Brotherhood of the Watch",
      "price": "63.96",
      "price_ca": "84.99",
      "price_uk": "63.99",
      "price_au": "89.95",
      "msrp": 79.95,
      "msrps": [
        {
          "country": "US",
          "price": 79.95
        }
      ],
      "discount": "0.20",
      "year_published": 2017,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 75,
      "min_age": 14,
      "description": "Take the Black! Defend Westeros! Become the Lord Commander! The Brothers of the Night`s Watch seek a new leader from among their ranks. Jeor Mormont wishes to promote one who can improve the infrastructure of the Gift, the bountiful and undeveloped area south of the Wall bestowed to the Watch by the Starks thousands of years ago. Drawing sustenance from the unforgiving landscape of the north offers enough challenges, but whomever takes up this task must also man and defend the Wall against the onslaught of Wildlings fighting their way into Westeros. Many brothers now compete to build, defend, and do what they can to protect Westeros, but only one shall rise above their brothers to become the new Lord Commander. But, be wary - the north holds many dangers, and winter is coming. The battle to defend the Realms of Man begins in A Game of Thrones Catan: Brotherhood of the Watch, a strategic game grounded in the engrossing world of George R. R. Martin`s A Song of Ice and Fire series and adapted for Catan by Klaus and Benjamin Teuber.",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://cdn.shopify.com/s/files/1/0513/4077/1515/products/a-game-of-thrones-catan-board-game.jpg?v=1609629113",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324720093.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "U3zhCQH7Et",
          "url": "https://www.boardgameatlas.com/mechanic/U3zhCQH7Et/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "fLH8tXTBBp",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/fLH8tXTBBp/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Sxz8RMLsAP",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/Sxz8RMLsAP/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Fantasy Flight Games",
        "id": "fLH8tXTBBp",
        "url": "https://www.boardgameatlas.com/publisher/fLH8tXTBBp/fantasy-flight-games"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [
        "Catan Juego de Tronos: La Hermandad De La Guardia",
        "Catan Игра Престолов: Братство Ночного Дозора",
        "A Game of Thrones: Catan",
        "A Game of Thrones: Catan – Die Bruderschaft der Nachtwache",
        "Gra o Tron Catan: Braterstwo Straży",
        "Le Trône de fer: Catan – Les frères jurés de la garde",
        "Il Trono di Spade: Catan"
      ],
      "amazon_rank": 10434,
      "official_url": "https://www.fantasyflightgames.com/en/products/a-game-of-thrones-catan-brotherhood-of-the-watch/?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 21,
      "average_user_rating": 3.071428571428571,
      "historical_low_prices": [
        {
          "country": "AU",
          "date": "2021-12-02T20:33:06.439Z",
          "price": 104.95,
          "isLow": false
        },
        {
          "country": "UK",
          "date": "2021-12-15T21:06:42.141Z",
          "price": 63.99,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-02T05:42:37.134Z",
          "price": 84.99,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-12-04T00:45:17.225Z",
          "price": 63.96,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 650,
      "lists": 147,
      "mentions": 0,
      "links": 1,
      "plays": 42,
      "rank": 9999999,
      "type": "game",
      "sku": "FFGCN3015",
      "upc": "841333103330",
      "num_distributors": 7,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CN3016",
        "2148600102",
        "2149147042",
        "ASMCN3015",
        "841333103330",
        "CN3015",
        "92277",
        "68253851",
        "0841333103330",
        "44872",
        "43894 #0561",
        "88912:97290",
        "CSICN3015",
        "FFGCN3015",
        "I041_CATAN_GOT_M",
        "2149090077",
        "Ballarat|02dcd191-ae0b-11e8-ed44-62a037dcc207",
        "FFGVA65"
      ],
      "sku_objects": [
        {
          "name": "Boarding School Games",
          "sku": "CN3016"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148600102"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149147042"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3015"
        },
        {
          "name": "401 Games",
          "sku": "841333103330"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "CN3015"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "92277"
        },
        {
          "name": "Bed Bath and Beyond Inc.",
          "sku": "68253851"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "0841333103330"
        },
        {
          "name": "Hanabee",
          "sku": "44872"
        },
        {
          "name": "Funagain Games",
          "sku": "43894 #0561"
        },
        {
          "name": "BoardGameCo",
          "sku": "88912:97290"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3015"
        },
        {
          "name": "Miniature Market",
          "sku": "FFGCN3015"
        },
        {
          "name": "Gameology",
          "sku": "I041_CATAN_GOT_M"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149090077"
        },
        {
          "name": "Guf",
          "sku": "Ballarat|02dcd191-ae0b-11e8-ed44-62a037dcc207"
        },
        {
          "name": "Imaginaire Shop",
          "sku": "FFGVA65"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=fz1hSbgUN2&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "60-75",
      "msrp_text": "$79.95",
      "price_text": "$63.96",
      "tags": [
        "A Game of Thrones Catan: Brotherhood of the Watch",
        "Catan: Game of Thrones GoT Board Game",
        "A Game of Thrones: Catan - Brotherhood of the Watch",
        "Catan - Game of Thrones Brotherhood of the Watch",
        "Game of Thrones Catan A Brotherhood of the Watch w 5 6 Player Expansion",
        "A Game of Thrones Catan Brotherhood of the Watch",
        "CATAN A GAME OF THRONES Brotherhood of the Watch",
        "Game of Thrones Catan Brotherhood of the Watch",
        "Catan Game Of Thrones Brotherhood Of The Watch",
        "A GAME OF THRONES CATAN BROTHERHOOD OF THE WATCH ENGLISH",
        "A Game of Thrones Catan Brotherhood of the Watch Strategy",
        "Catan Juego de Tronos: La Hermandad De La Guardia",
        "Catan Игра Престолов: Братство Ночного Дозора",
        "A Game of Thrones: Catan",
        "A Game of Thrones: Catan – Die Bruderschaft der Nachtwache",
        "Gra o Tron Catan: Braterstwo Straży",
        "Le Trône de fer: Catan – Les frères jurés de la garde",
        "Il Trono di Spade: Catan"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1629324720093.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1629324720093.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1629324720093.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1629324720093.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1629324720093.jpg"
      },
      "description_preview": "Take the Black! Defend Westeros! Become the Lord Commander! The Brothers of the Night`s Watch seek a new leader from among their ranks. Jeor Mormont wishes to promote one who can improve the infrastructure of the Gift, the bountiful and undeveloped area south of the Wall bestowed to the Watch by the Starks thousands of years ago. Drawing sustenance from the unforgiving landscape of the north offers enough challenges, but whomever takes up this task must also man and defend the Wall against the onslaught of Wildlings fighting their way into Westeros. Many brothers now compete to build, defend, and do what they can to protect Westeros, but only one shall rise above their brothers to become the new Lord Commander. But, be wary - the north holds many dangers, and winter is coming. The battle to defend the Realms of Man begins in A Game of Thrones Catan: Brotherhood of the Watch, a strategic game grounded in the engrossing world of George R. R. Martin`s A Song of Ice and Fire series and adapted for Catan by Klaus and Benjamin Teuber."
    },
    {
      "id": "gOc2BAoD7h",
      "handle": "catan-geographies-germany",
      "url": "https://www.boardgameatlas.com/game/gOc2BAoD7h/catan-geographies-germany",
      "bga_edit_url": "https://www.boardgameatlas.com/game/gOc2BAoD7h/edit",
      "template_url": "/products/listing?objectId=gOc2BAoD7h&product_line=Board Games&type=product",
      "name": "Catan Geographies: Germany",
      "price": "544.77",
      "price_ca": "0.00",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 55,
      "msrps": [
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "-8.90",
      "year_published": 2008,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 60,
      "max_playtime": 60,
      "min_age": 10,
      "description": "A Game of Discovery, Geography, and History in the land of Poets and Thinkers.\r\n\r\nExplore and settle the storied land of Germany using the elegant, award-winning game design from The Settlers of Catan®. Here, you will find great social interaction, simple rules, beautiful German geography, rich history and lore, and 12 wonderfully-sculpted landmarks.\r\n\r\n&quot;Catan Geographies: Germany&quot; is a game about trade, building, and settlement. Start with town halls in 3 cities. Then build roads to neighboring cities, where you can purchase landmarks and new town halls. Town halls create resource production, while the unique landmarks generate special awards. Both yield victory points- as do the Longest Road, Largest Army, and the historically-based victory point cards.\r\n\r\nSo, have fun with friends or family while casually discovering the novel geography and history of Germany.\r\n\r\n\r\n&quot;Catan Germany&quot; contains:\r\n• An amazing, color map board depicting 28 different city scenes and 12\r\nhistoric landmarks.\r\n• 120 cards (including 90 resource cards, 26 development cards, and 4\r\nbuilding cost cards).\r\n• 141 game pieces (including 12 landmarks, 80 roads, 48 town halls, and 1\r\n&quot;Götz von Berlichingen&quot;).\r\n• 2 dice.\r\n• Rules and an illustrated geographic almanac",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257760672-51qjtFiVqTL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257760672-51qjtFiVqTL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "r6yIFvyXDD",
          "url": "https://www.boardgameatlas.com/mechanic/r6yIFvyXDD/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        }
      ],
      "categories": [],
      "publishers": [
        {
          "id": "7GTti1NuCH",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Mayfair Games",
        "id": "7GTti1NuCH",
        "url": "https://www.boardgameatlas.com/publisher/7GTti1NuCH/mayfair-games"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Tanja Donner",
        "Michael Menzel"
      ],
      "names": [
        "Die Siedler von Catan: Deutschland-Edition"
      ],
      "rules_url": null,
      "amazon_rank": 857171,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 8,
      "average_user_rating": 3.125,
      "historical_low_prices": [
        {
          "country": "CA",
          "date": "2022-01-20T10:39:30.642Z",
          "price": 546.27,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-03-21T10:01:31.455Z",
          "price": 544.77,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 541,
      "lists": 33,
      "mentions": 0,
      "links": 0,
      "plays": 9,
      "rank": 9999999,
      "type": "game",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "7122:31268",
        "MFG3251"
      ],
      "sku_objects": [
        {
          "name": "BoardGameCo",
          "sku": "7122:31268"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3251"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=gOc2BAoD7h&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "60",
      "msrp_text": "$55.00",
      "price_text": "$544.77",
      "tags": [
        "Die Siedler von Catan: Deutschland-Edition"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257760672-51qjtFiVqTL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257760672-51qjtFiVqTL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257760672-51qjtFiVqTL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257760672-51qjtFiVqTL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257760672-51qjtFiVqTL.jpg"
      },
      "description_preview": "A Game of Discovery, Geography, and History in the land of Poets and Thinkers.\r\n\r\nExplore and settle the storied land of Germany using the elegant, award-winning game design from The Settlers of Catan®. Here, you will find great social interaction, simple rules, beautiful German geography, rich history and lore, and 12 wonderfully-sculpted landmarks.\r\n\r\n\"Catan Geographies: Germany\" is a game about trade, building, and settlement. Start with town halls in 3 cities. Then build roads to neighboring cities, where you can purchase landmarks and new town halls. Town halls create resource production, while the unique landmarks generate special awards. Both yield victory points- as do the Longest Road, Largest Army, and the historically-based victory point cards.\r\n\r\nSo, have fun with friends or family while casually discovering the novel geography and history of Germany.\r\n\r\n\r\n\"Catan Germany\" contains:\r\n• An amazing, color map board depicting 28 different city scenes and 12\r\nhistoric landmarks.\r\n• 120 cards (including 90 resource cards, 26 development cards, and 4\r\nbuilding cost cards).\r\n• 141 game pieces (including 12 landmarks, 80 roads, 48 town halls, and 1\r\n\"Götz von Berlichingen\").\r\n• 2 dice.\r\n• Rules and an illustrated geographic almanac"
    },
    {
      "id": "QmxNxi1Vrm",
      "handle": "rivals-for-catan-deluxe",
      "url": "https://www.boardgameatlas.com/game/QmxNxi1Vrm/rivals-for-catan-deluxe",
      "bga_edit_url": "https://www.boardgameatlas.com/game/QmxNxi1Vrm/edit",
      "template_url": "/products/listing?objectId=QmxNxi1Vrm&product_line=Board Games&type=product",
      "name": "Rivals for Catan: Deluxe",
      "price": "24.49",
      "price_ca": "42.49",
      "price_uk": "0.00",
      "price_au": "53.95",
      "msrp": 37,
      "msrps": [
        {
          "country": "US",
          "price": 37
        }
      ],
      "discount": "0.34",
      "year_published": 2016,
      "min_players": 2,
      "max_players": 2,
      "player_counts": [
        2
      ],
      "min_playtime": 45,
      "max_playtime": 60,
      "min_age": 10,
      "description": "Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your unique card mix to create your own principality. Explore and settle new lands. Acquire resources through card play and the luck of the dice. Use gold, resource combinations, and trade to develop your domain. Expand your settlements and cities, recruit heroes, and defend your lands through politics, invention, and intrigue. Use your cunning! Become prince of Catan! The perfect way for two players to settle and develop the ever-mysterious and fantastic land of Catan, this Deluxe Edition of Rivals for Catan features all-new card trays to keep your draw piles organized, and comes with three expansions and nine rare promotional cards.",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540938951422",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540938951422",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "iWODHwRGuU",
          "url": "https://www.boardgameatlas.com/mechanic/iWODHwRGuU/undefined"
        },
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "WPytek5P8l",
          "url": "https://www.boardgameatlas.com/mechanic/WPytek5P8l/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [
        {
          "id": "eX8uuNlQkQ",
          "url": "https://www.boardgameatlas.com/category/eX8uuNlQkQ/undefined"
        },
        {
          "id": "buDTYyPw4D",
          "url": "https://www.boardgameatlas.com/category/buDTYyPw4D/undefined"
        }
      ],
      "publishers": [
        {
          "id": "eJue6JPxqV",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "mgSqw0Whv1",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/mgSqw0Whv1/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "Dtrwc4ldq3",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/Dtrwc4ldq3/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        },
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Catan Studio",
        "id": "eJue6JPxqV",
        "url": "https://www.boardgameatlas.com/publisher/eJue6JPxqV/catan-studio"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Michael Menzel"
      ],
      "names": [],
      "rules_url": "https://www.catan.com/files/downloads/rivals_deluxe_rules_160511.pdf",
      "official_url": "https://www.catan.com/game/rivals-catan?utm_source=boardgameatlas.com&utm_medium=search&utm_campaign=bga_ads",
      "comment_count": 0,
      "num_user_ratings": 4,
      "average_user_rating": 3.13875,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-11-25T10:59:26.694Z",
          "price": 29.49,
          "isLow": false
        },
        {
          "country": "AU",
          "date": "2021-12-07T14:31:44.609Z",
          "price": 53.95,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2022-01-02T22:06:13.382Z",
          "price": 39.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-12-21T03:37:42.475Z",
          "price": 24.49,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 518,
      "lists": 41,
      "mentions": 0,
      "links": 0,
      "plays": 4,
      "rank": 9999999,
      "type": "game",
      "upc": "029877031344",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "029877031344",
        "CN3134",
        "30013",
        "2148562107",
        "29877031344",
        "47373 #0472",
        "85733:91013",
        "CSG1004",
        "CSICN3134",
        "F0141_CATAN_RIVALS_DELUX_SH"
      ],
      "sku_objects": [
        {
          "name": "401 Games",
          "sku": "029877031344"
        },
        {
          "name": "Advent Games",
          "sku": "CN3134"
        },
        {
          "name": "Hanabee",
          "sku": "30013"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2148562107"
        },
        {
          "name": "Board Game Supply",
          "sku": "29877031344"
        },
        {
          "name": "Funagain Games",
          "sku": "47373 #0472"
        },
        {
          "name": "BoardGameCo",
          "sku": "85733:91013"
        },
        {
          "name": "Board's Edge Games",
          "sku": "CSG1004"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3134"
        },
        {
          "name": "Gameology",
          "sku": "F0141_CATAN_RIVALS_DELUX_SH"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=QmxNxi1Vrm&product_line=Board Games&type=product",
      "players": "2",
      "playtime": "45-60",
      "msrp_text": "$37.00",
      "price_text": "$24.49",
      "tags": [
        "Catan: Duel",
        "Catan: Pojedynek",
        "Settlers of Catan Rivals for Catan Deluxe Edition",
        "Rivals for Catan Deluxe Edition",
        "The Rivals for Catan Deluxe",
        "Rivals for Catan Deluxe Game",
        "Rivals For Catan - Deluxe",
        "Rivals for Catan: Deluxe",
        "Rivals for Catan Deluxe",
        "Rivals For Catan Deluxe"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1540938951422",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1540938951422",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1540938951422",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1540938951422",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540938951422"
      },
      "description_preview": "Rivals for Catan puts you in charge of one of the two factions developing newly-settled Catan. Use your unique card mix to create your own principality. Explore and settle new lands. Acquire resources through card play and the luck of the dice. Use gold, resource combinations, and trade to develop your domain. Expand your settlements and cities, recruit heroes, and defend your lands through politics, invention, and intrigue. Use your cunning! Become prince of Catan! The perfect way for two players to settle and develop the ever-mysterious and fantastic land of Catan, this Deluxe Edition of Rivals for Catan features all-new card trays to keep your draw piles organized, and comes with three expansions and nine rare promotional cards."
    },
    {
      "id": "n1NQoeB1iv",
      "handle": "catan-scenarios-the-helpers-of-catan",
      "url": "https://www.boardgameatlas.com/game/n1NQoeB1iv/catan-scenarios-the-helpers-of-catan",
      "bga_edit_url": "https://www.boardgameatlas.com/game/n1NQoeB1iv/edit",
      "template_url": "/products/listing?objectId=n1NQoeB1iv&product_line=Board Games&type=product",
      "name": "Catan Scenarios: The Helpers of Catan",
      "price": "11.19",
      "price_ca": "13.95",
      "price_uk": "0.00",
      "price_au": "20.99",
      "msrp": 8,
      "msrps": [
        {
          "country": "US",
          "price": 8
        }
      ],
      "discount": "-0.40",
      "year_published": 2010,
      "min_players": 3,
      "max_players": 6,
      "player_counts": [
        3,
        4,
        5,
        6
      ],
      "min_playtime": 45,
      "max_playtime": 45,
      "min_age": 12,
      "description": "Come meet some of the most influential and helpful people on Catan. They are offering their skills and experience to help you with your building plans. This small expansion is suitable for use with &quot;The Settlers of Catan&quot; and with &quot;Seafarers&quot;.<br />\r\n<br />\r\n10 hard-working characters to help you settle your kingdom. Can be played with 5-6 players with two sets.",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540936472519",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540936472519",
      "matches_specs": null,
      "specs": [],
      "mechanics": [],
      "categories": [
        {
          "id": "v4SfYtS2Lr",
          "url": "https://www.boardgameatlas.com/category/v4SfYtS2Lr/undefined"
        }
      ],
      "publishers": [
        {
          "id": "1LE7oe5KVZ",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "name": "Asmodee",
        "id": "1LE7oe5KVZ",
        "url": "https://www.boardgameatlas.com/publisher/1LE7oe5KVZ/asmodee"
      },
      "primary_designer": {
        "name": "Klaus Teuber",
        "id": "LCjyh7WnHd",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [],
      "names": [],
      "rules_url": null,
      "official_url": null,
      "comment_count": 0,
      "num_user_ratings": 12,
      "average_user_rating": 3.875,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-12-11T02:43:09.323Z",
          "price": 8.28,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2021-12-18T06:08:04.817Z",
          "price": 9.95,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-11-26T23:05:52.066Z",
          "price": 11.19,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 491,
      "lists": 72,
      "mentions": 0,
      "links": 0,
      "plays": 9,
      "rank": 9999999,
      "type": "game",
      "upc": "029877031153",
      "num_distributors": 4,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "27197",
        "550003",
        "2149196895",
        "029877031153",
        "7128:45300",
        "CN3115",
        "CSICN3115",
        "MFG3115",
        "CRDHS-65C7CD90",
        "CN3128",
        "841333116125",
        "CSICN3128",
        "ASMCN3128"
      ],
      "sku_objects": [
        {
          "name": "Hanabee",
          "sku": "27197"
        },
        {
          "name": "gameknight.ca",
          "sku": "550003"
        },
        {
          "name": "Noble Knight Games",
          "sku": "2149196895"
        },
        {
          "name": "Game Kastle",
          "sku": "029877031153"
        },
        {
          "name": "BoardGameCo",
          "sku": "7128:45300"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "CN3115"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3115"
        },
        {
          "name": "Miniature Market",
          "sku": "MFG3115"
        },
        {
          "name": "Card Haus",
          "sku": "CRDHS-65C7CD90"
        },
        {
          "name": "Advent Games",
          "sku": "CN3128"
        },
        {
          "name": "Good Games",
          "sku": "841333116125"
        },
        {
          "name": "Game Nerdz",
          "sku": "CSICN3128"
        },
        {
          "name": "Card Haus",
          "sku": "ASMCN3128"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=n1NQoeB1iv&product_line=Board Games&type=product",
      "players": "3-6",
      "playtime": "45",
      "msrp_text": "$8.00",
      "price_text": "$11.19",
      "tags": [
        "Catan Scenarios: Helpers of Catan Expansion",
        "Catan Scenario: Helpers of Catan",
        "Catan Scenarios The Helpers of Catan",
        "Catan Scenarios: Helpers of Catan",
        "Catan Scenarios Helpers of Catan",
        "Catan Helpers Of Catan"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1540936472519",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1540936472519",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1540936472519",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1540936472519",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1540936472519"
      },
      "description_preview": "Come meet some of the most influential and helpful people on Catan. They are offering their skills and experience to help you with your building plans. This small expansion is suitable for use with \"The Settlers of Catan\" and with \"Seafarers\". \r\n \r\n10 hard-working characters to help you settle your kingdom. Can be played with 5-6 players with two sets."
    },
    {
      "id": "nn8gLmXAeK",
      "handle": "catan-histories-merchants-of-europe",
      "url": "https://www.boardgameatlas.com/game/nn8gLmXAeK/catan-histories-merchants-of-europe",
      "bga_edit_url": "https://www.boardgameatlas.com/game/nn8gLmXAeK/edit",
      "template_url": "/products/listing?objectId=nn8gLmXAeK&product_line=Board Games&type=product",
      "name": "Catan Histories: Merchants of Europe",
      "price": "0.00",
      "price_ca": "64.99",
      "price_uk": "0.00",
      "price_au": "0.00",
      "msrp": 55,
      "msrps": [
        {
          "country": "US",
          "price": 55
        }
      ],
      "discount": "0.00",
      "year_published": 2011,
      "min_players": 3,
      "max_players": 4,
      "player_counts": [
        3,
        4
      ],
      "min_playtime": 120,
      "max_playtime": 120,
      "min_age": 12,
      "description": "<p>In the late Middle Ages, trade flourished in Europe. Economic groups like the Hanseatic League, the Welser and Fugger families, and merchants from Northern Italy established trading posts and factories in all of the important cities throughout Europe. These businesses provided the population with goods of all kinds, such as fur from the north, cloth from Flanders, wine from the south, and spices from India. The most important commodity of all was salt. In the Middle Ages salt was highly prized it was used to preserve food.</p>\r\n<p>You are a powerful merchant. Start your trading posts in three cities. Recruit new merchants and send them to distant cities to establish trading posts and expand your interests. The more trading posts you have, the more commodities are at your disposal which you can sell profitably in foreign cities. To ensure that your commodities arrive safely at their destination, you must open up trade routes and equip caravans. You win the game if you are the first to deliver all of your commodities to foreign cities.</p>\r\n<p><strong>Merchants of Europe</strong> uses the simple and fun Catan hex and resource system to recreate the growth of the merchant class across medieval Europe. Collect and trade resources to expand trade routes and trading posts. Build caravans to transport your goods to market before your rivals do. Can you expand your trading network more quickly and efficiently and become the most powerful merchant in all of Europe?</p>",
      "commentary": "",
      "faq": "",
      "thumb_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257843585-61IrfZnLmHL.jpg",
      "image_url": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257843585-61IrfZnLmHL.jpg",
      "matches_specs": null,
      "specs": [],
      "mechanics": [
        {
          "id": "R0bGq4cAl4",
          "url": "https://www.boardgameatlas.com/mechanic/R0bGq4cAl4/undefined"
        },
        {
          "id": "ohABM4GjbC",
          "url": "https://www.boardgameatlas.com/mechanic/ohABM4GjbC/undefined"
        },
        {
          "id": "AVY6EvSQTP",
          "url": "https://www.boardgameatlas.com/mechanic/AVY6EvSQTP/undefined"
        }
      ],
      "categories": [
        {
          "id": "QAYkTHK1Dd",
          "url": "https://www.boardgameatlas.com/category/QAYkTHK1Dd/undefined"
        }
      ],
      "publishers": [
        {
          "id": "RY4XltbNAz",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "designers": [
        {
          "id": "LCjyh7WnHd",
          "num_games": null,
          "score": 9999999,
          "game": {},
          "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/undefined",
          "images": {
            "thumb": null,
            "small": null,
            "medium": null,
            "large": null,
            "original": null
          }
        }
      ],
      "primary_publisher": {
        "id": "RY4XltbNAz",
        "name": "KOSMOS",
        "url": "https://www.boardgameatlas.com/publisher/RY4XltbNAz/kosmos"
      },
      "primary_designer": {
        "id": "LCjyh7WnHd",
        "name": "Klaus Teuber",
        "url": "https://www.boardgameatlas.com/designer/LCjyh7WnHd/klaus-teuber"
      },
      "developers": [],
      "related_to": [],
      "related_as": [],
      "artists": [
        "Michael Menzel",
        "Pedro Soto"
      ],
      "names": [],
      "rules_url": null,
      "amazon_rank": 277117,
      "official_url": null,
      "sell_sheet_url": null,
      "store_images_url": null,
      "comment_count": 0,
      "num_user_ratings": 4,
      "average_user_rating": 3.1875,
      "historical_low_prices": [
        {
          "country": "UK",
          "date": "2021-06-04T18:48:10.969Z",
          "price": 33.11,
          "isLow": false
        },
        {
          "country": "CA",
          "date": "2021-10-21T02:25:41.644Z",
          "price": 130.37,
          "isLow": false
        },
        {
          "country": "US",
          "date": "2022-07-02T16:46:34.920Z",
          "price": 149.99,
          "isLow": false
        }
      ],
      "active": true,
      "num_user_complexity_votes": 0,
      "average_learning_complexity": 0,
      "average_strategy_complexity": 0,
      "visits": 453,
      "lists": 43,
      "mentions": 0,
      "links": 0,
      "plays": 5,
      "rank": 9999999,
      "type": "game",
      "upc": "29877032044",
      "num_distributors": 0,
      "trending_rank": 0,
      "listing_clicks": 0,
      "is_historical_low": false,
      "skus": [
        "CRDHS-EB05E448",
        "94825",
        "MFG3204",
        "21889",
        "029877032044",
        "7126:692",
        "CN3204"
      ],
      "sku_objects": [
        {
          "name": "Card Haus",
          "sku": "CRDHS-EB05E448"
        },
        {
          "name": "Game Shack Inc.",
          "sku": "94825"
        },
        {
          "name": "WoodForSheep Hobbies Ltd.",
          "sku": "MFG3204"
        },
        {
          "name": "Hanabee",
          "sku": "21889"
        },
        {
          "name": "Game Kastle",
          "sku": "029877032044"
        },
        {
          "name": "BoardGameCo",
          "sku": "7126:692"
        },
        {
          "name": "BoardGameBliss Inc",
          "sku": "CN3204"
        }
      ],
      "edit_url": "/products/listing-edit?objectId=nn8gLmXAeK&product_line=Board Games&type=product",
      "players": "3-4",
      "playtime": "120",
      "msrp_text": "$55.00",
      "price_text": "Price: N/A",
      "tags": [
        "Catan Historias: Los Colonos de Europa",
        "I Coloni di Catan: Europa Medievale",
        "Colonistii din Catan Europa",
        "Colonistii din Catan: Europa",
        "Los Colonos de Europa",
        "De Kolonisten van Catan: Europa ontwaakt",
        "Obchod v Evropě: Osadníci z Katanu",
        "Osadnicy z Catanu: Na podbój Europy",
        "Settlers fra Catan: Europa",
        "Die Siedler von Catan: Aufbruch der Händler",
        "Колонизаторы Европы",
        "Колонизаторы: Европа.",
        "Catan Histories Merchants of Europe",
        "Catan Histories: Merchants of Europe",
        "CATAN HISTORIES Merchants of Europe"
      ],
      "images": {
        "thumb": "https://d2k4q26owzy373.cloudfront.net/40x40/games/uploaded/1559257843585-61IrfZnLmHL.jpg",
        "small": "https://d2k4q26owzy373.cloudfront.net/150x150/games/uploaded/1559257843585-61IrfZnLmHL.jpg",
        "medium": "https://d2k4q26owzy373.cloudfront.net/350x350/games/uploaded/1559257843585-61IrfZnLmHL.jpg",
        "large": "https://d2k4q26owzy373.cloudfront.net/700x700/games/uploaded/1559257843585-61IrfZnLmHL.jpg",
        "original": "https://s3-us-west-1.amazonaws.com/5cc.images/games/uploaded/1559257843585-61IrfZnLmHL.jpg"
      },
      "description_preview": " In the late Middle Ages, trade flourished in Europe. Economic groups like the Hanseatic League, the Welser and Fugger families, and merchants from Northern Italy established trading posts and factories in all of the important cities throughout Europe. These businesses provided the population with goods of all kinds, such as fur from the north, cloth from Flanders, wine from the south, and spices from India. The most important commodity of all was salt. In the Middle Ages salt was highly prized it was used to preserve food. \r\n You are a powerful merchant. Start your trading posts in three cities. Recruit new merchants and send them to distant cities to establish trading posts and expand your interests. The more trading posts you have, the more commodities are at your disposal which you can sell profitably in foreign cities. To ensure that your commodities arrive safely at their destination, you must open up trade routes and equip caravans. You win the game if you are the first to deliver all of your commodities to foreign cities. \r\n  Merchants of Europe  uses the simple and fun Catan hex and resource system to recreate the growth of the merchant class across medieval Europe. Collect and trade resources to expand trade routes and trading posts. Build caravans to transport your goods to market before your rivals do. Can you expand your trading network more quickly and efficiently and become the most powerful merchant in all of Europe? "
    }
  ],
  "count": 231
}
  recorded_at: Tue, 07 Feb 2023 14:25:20 GMT
recorded_with: VCR 6.1.0
